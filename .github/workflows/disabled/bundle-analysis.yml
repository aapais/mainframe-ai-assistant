name: Bundle Size Analysis

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run daily at 2 AM UTC to track trends
    - cron: '0 2 * * *'

jobs:
  bundle-analysis:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2 # Need previous commit for comparison

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g gzip-size-cli brotli-size-cli

    - name: Build project
      run: npm run build
      env:
        NODE_ENV: production

    - name: Run bundle analysis
      run: |
        node scripts/analyze-bundle.js \
          --dist-dir dist \
          --output-dir bundle-analysis \
          --max-bundle-size 2097152
      continue-on-error: true

    - name: Run dependency size analysis
      run: |
        node scripts/dependency-size-report.js \
          --output-dir bundle-analysis
      continue-on-error: true

    - name: Download previous bundle analysis
      if: github.event_name == 'pull_request'
      uses: actions/download-artifact@v4
      with:
        name: bundle-analysis-${{ github.base_ref }}
        path: previous-analysis
      continue-on-error: true

    - name: Compare with previous analysis
      if: github.event_name == 'pull_request'
      run: |
        if [ -f "previous-analysis/bundle-analysis.json" ]; then
          node scripts/bundle-comparison.js \
            bundle-analysis/bundle-analysis.json \
            --previous previous-analysis/bundle-analysis.json \
            --output-dir bundle-analysis
        else
          echo "No previous analysis found for comparison"
        fi
      continue-on-error: true

    - name: Generate bundle visualization
      run: |
        # Create a simple visualization script
        cat > bundle-analysis/generate-visualization.js << 'EOF'
        const fs = require('fs');
        const path = require('path');

        if (fs.existsSync('bundle-analysis/bundle-analysis.json')) {
          const analysis = JSON.parse(fs.readFileSync('bundle-analysis/bundle-analysis.json', 'utf8'));

          // Create a simple JSON for visualization
          const vizData = {
            name: 'Bundle',
            children: analysis.files.map(file => ({
              name: file.name,
              value: file.size,
              type: file.type,
              gzipSize: file.gzipSize
            }))
          };

          fs.writeFileSync('bundle-analysis/bundle-viz.json', JSON.stringify(vizData, null, 2));
          console.log('Bundle visualization data generated');
        }
        EOF

        node bundle-analysis/generate-visualization.js

    - name: Check bundle size budgets
      id: budget-check
      run: |
        if [ -f "bundle-analysis/bundle-analysis.json" ]; then
          # Extract warnings from analysis
          WARNINGS=$(node -e "
            const analysis = JSON.parse(require('fs').readFileSync('bundle-analysis/bundle-analysis.json', 'utf8'));
            const errors = analysis.warnings.filter(w => w.level === 'error');
            const warnings = analysis.warnings.filter(w => w.level === 'warning');
            console.log('ERRORS=' + errors.length);
            console.log('WARNINGS=' + warnings.length);
            if (errors.length > 0) {
              console.log('BUDGET_EXCEEDED=true');
              process.exit(1);
            }
          ")

          echo "$WARNINGS"
          echo "$WARNINGS" >> $GITHUB_OUTPUT
        fi

    - name: Create bundle size summary
      run: |
        cat > bundle-summary.md << 'EOF'
        # Bundle Size Analysis Results

        ## Summary
        EOF

        if [ -f "bundle-analysis/bundle-analysis.json" ]; then
          node -e "
            const analysis = JSON.parse(require('fs').readFileSync('bundle-analysis/bundle-analysis.json', 'utf8'));
            const totalSize = analysis.files.reduce((sum, file) => sum + file.size, 0);
            const totalGzipped = analysis.files.reduce((sum, file) => sum + file.gzipSize, 0);

            console.log('- **Total Bundle Size:** ' + formatSize(totalSize));
            console.log('- **Total Gzipped:** ' + formatSize(totalGzipped));
            console.log('- **Compression Ratio:** ' + (totalGzipped / totalSize * 100).toFixed(1) + '%');
            console.log('- **File Count:** ' + analysis.files.length);
            console.log('- **Warnings:** ' + analysis.warnings.length);

            if (analysis.warnings.length > 0) {
              console.log('\\n## Warnings');
              analysis.warnings.forEach(w => {
                console.log('- **' + w.type.toUpperCase() + ':** ' + w.message);
              });
            }

            console.log('\\n## Largest Files');
            console.log('| File | Size | Gzipped | Type |');
            console.log('|------|------|---------|------|');
            analysis.files.slice(0, 10).forEach(file => {
              console.log('| ' + file.name + ' | ' + formatSize(file.size) + ' | ' + formatSize(file.gzipSize) + ' | ' + file.type + ' |');
            });

            function formatSize(bytes) {
              if (bytes === 0) return '0 B';
              const k = 1024;
              const sizes = ['B', 'KB', 'MB', 'GB'];
              const i = Math.floor(Math.log(bytes) / Math.log(k));
              return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
            }
          " >> bundle-summary.md
        fi

        if [ -f "bundle-analysis/bundle-comparison.md" ]; then
          echo -e "\n---\n" >> bundle-summary.md
          cat bundle-analysis/bundle-comparison.md >> bundle-summary.md
        fi

    - name: Comment PR with bundle analysis
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');

          if (fs.existsSync('bundle-summary.md')) {
            const summary = fs.readFileSync('bundle-summary.md', 'utf8');

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('Bundle Size Analysis Results')
            );

            const commentBody = `<!-- bundle-analysis -->\n${summary}`;

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
          }

    - name: Upload bundle analysis artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ github.sha }}
        path: bundle-analysis/
        retention-days: 30

    - name: Upload bundle analysis for base branch
      if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ github.ref_name }}
        path: bundle-analysis/
        retention-days: 30

    - name: Publish bundle trends to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Create a simple trends page
        mkdir -p public

        cat > public/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Bundle Size Trends</title>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .chart-container { width: 80%; margin: 20px auto; }
                .summary { background: #f5f5f5; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
            </style>
        </head>
        <body>
            <h1>Bundle Size Trends</h1>
            <div class="summary">
                <h2>Latest Analysis</h2>
                <p>Last updated: <span id="lastUpdate"></span></p>
                <p>Total bundle size: <span id="totalSize"></span></p>
                <p>File count: <span id="fileCount"></span></p>
            </div>

            <div class="chart-container">
                <canvas id="sizeChart"></canvas>
            </div>

            <div class="chart-container">
                <canvas id="fileChart"></canvas>
            </div>

            <script>
                // Load latest analysis data
                if (typeof bundleData !== 'undefined') {
                    document.getElementById('lastUpdate').textContent = bundleData.timestamp;
                    document.getElementById('totalSize').textContent = formatSize(bundleData.totalSize);
                    document.getElementById('fileCount').textContent = bundleData.fileCount;
                }

                function formatSize(bytes) {
                    if (bytes === 0) return '0 B';
                    const k = 1024;
                    const sizes = ['B', 'KB', 'MB', 'GB'];
                    const i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
                }
            </script>
        </body>
        </html>
        EOF

        # Copy bundle analysis results
        if [ -f "bundle-analysis/bundle-report.html" ]; then
          cp bundle-analysis/bundle-report.html public/latest.html
        fi

        if [ -f "bundle-analysis/bundle-analysis.json" ]; then
          cp bundle-analysis/bundle-analysis.json public/latest.json
        fi

    - name: Deploy to GitHub Pages
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
        destination_dir: bundle-analysis

    - name: Create bundle size badge
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        if [ -f "bundle-analysis/bundle-analysis.json" ]; then
          TOTAL_SIZE=$(node -e "
            const analysis = JSON.parse(require('fs').readFileSync('bundle-analysis/bundle-analysis.json', 'utf8'));
            const totalSize = analysis.files.reduce((sum, file) => sum + file.size, 0);
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(totalSize) / Math.log(k));
            const size = parseFloat((totalSize / Math.pow(k, i)).toFixed(1));
            console.log(size + sizes[i]);
          ")

          # Create badge URL (using shields.io)
          BADGE_URL="https://img.shields.io/badge/bundle%20size-${TOTAL_SIZE}-blue"
          echo "Bundle size badge: $BADGE_URL"

          # Save badge URL for use in README or documentation
          echo "BUNDLE_SIZE_BADGE_URL=$BADGE_URL" >> $GITHUB_ENV
        fi

    - name: Fail if budget exceeded
      if: steps.budget-check.outputs.BUDGET_EXCEEDED == 'true'
      run: |
        echo "❌ Bundle size budget exceeded!"
        echo "Review the bundle analysis results and optimize before merging."
        exit 1

  bundle-security-scan:
    runs-on: ubuntu-latest
    needs: bundle-analysis

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download bundle analysis
      uses: actions/download-artifact@v4
      with:
        name: bundle-analysis-${{ github.sha }}
        path: bundle-analysis

    - name: Security scan of dependencies
      run: |
        npm audit --audit-level=moderate --json > audit-results.json || true

        # Analyze audit results with dependency sizes
        node -e "
          const fs = require('fs');

          if (fs.existsSync('audit-results.json') && fs.existsSync('bundle-analysis/dependency-size-report.json')) {
            const audit = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
            const depReport = JSON.parse(fs.readFileSync('bundle-analysis/dependency-size-report.json', 'utf8'));

            console.log('## Security Analysis');
            console.log('Total vulnerabilities:', audit.metadata?.vulnerabilities?.total || 0);

            if (audit.vulnerabilities) {
              Object.values(audit.vulnerabilities).forEach(vuln => {
                const dep = depReport.dependencies.find(d => d.name === vuln.name);
                if (dep && dep.totalSize > 50 * 1024) { // Large dependencies with vulnerabilities
                  console.log('⚠️ Large vulnerable dependency:', vuln.name, 'Size:', formatSize(dep.totalSize));
                }
              });
            }
          }

          function formatSize(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
          }
        "

    - name: Check for known security issues in large dependencies
      run: |
        cat > security-check.js << 'EOF'
        const fs = require('fs');

        if (fs.existsSync('bundle-analysis/dependency-size-report.json')) {
          const report = JSON.parse(fs.readFileSync('bundle-analysis/dependency-size-report.json', 'utf8'));

          // Known problematic packages (example list)
          const problematic = ['event-stream', 'eslint-scope', 'flatmap-stream'];

          const issues = [];
          report.dependencies.forEach(dep => {
            if (problematic.includes(dep.name)) {
              issues.push(`⚠️ Potentially problematic dependency: ${dep.name}`);
            }

            // Check for very large dependencies
            if (dep.totalSize > 500 * 1024) { // 500KB
              issues.push(`📦 Very large dependency: ${dep.name} (${formatSize(dep.totalSize)})`);
            }
          });

          if (issues.length > 0) {
            console.log('Security and size concerns:');
            issues.forEach(issue => console.log(issue));
          } else {
            console.log('No major security or size concerns detected');
          }
        }

        function formatSize(bytes) {
          if (bytes === 0) return '0 B';
          const k = 1024;
          const sizes = ['B', 'KB', 'MB', 'GB'];
          const i = Math.floor(Math.log(bytes) / Math.log(k));
          return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }
        EOF

        node security-check.js