name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  NODE_OPTIONS: '--max-old-space-size=4096'
  CI: true
  FORCE_COLOR: 1

jobs:
  # Security and Quality Checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --production
          npm audit fix --dry-run

      - name: Check for known vulnerabilities
        run: |
          npx audit-ci --config .audit-ci.json || true
          echo "Security audit completed"

      - name: License compliance check
        run: |
          npx license-checker --summary --production --excludePrivatePackages

  # Lint and Code Quality
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: TypeScript type checking
        run: npm run typecheck

  # Build Matrix Test
  build-matrix:
    name: Build Test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]
        include:
          - os: ubuntu-latest
            cache-path: ~/.npm
          - os: windows-latest
            cache-path: ~\AppData\Roaming\npm-cache
          - os: macos-latest
            cache-path: ~/.npm

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      # Platform-specific dependency handling
      - name: Install build tools (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          npm install --global windows-build-tools --vs2015
          npm config set msvs_version 2015

      - name: Install build tools (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          sudo xcode-select --install || true

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Rebuild native modules
        run: npm rebuild

      - name: Build project
        run: npm run build

      - name: Validate build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          echo "Build validation successful"

  # Comprehensive Testing
  test-suite:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run unit tests
        run: npm run test -- --coverage --passWithNoTests

      - name: Run integration tests
        run: npm run test:integration || echo "Integration tests not configured"

      - name: Run performance tests
        run: npm run test:performance || echo "Performance tests not configured"

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            coverage/
            jest-results.xml
            test-report.html

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [test-suite]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Coverage threshold check
        run: |
          # Extract coverage percentages
          COVERAGE=$(npm run test:coverage 2>&1 | grep -E "All files.*[0-9]+\.[0-9]+%" || echo "0")
          echo "Coverage: $COVERAGE"

          # Check if coverage meets threshold (85%)
          if [[ $COVERAGE =~ ([0-9]+)\.([0-9]+)% ]]; then
            PERCENTAGE=${BASH_REMATCH[1]}
            if [ $PERCENTAGE -lt 85 ]; then
              echo "❌ Coverage $PERCENTAGE% is below threshold (85%)"
              exit 1
            else
              echo "✅ Coverage $PERCENTAGE% meets threshold"
            fi
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            coverage/lcov.info
            coverage/coverage-summary.json

  # Electron Build Test
  electron-build:
    name: Electron Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build Electron app
        run: |
          npm run build
          npm run electron:build || echo "Electron build not configured for this platform"

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-${{ matrix.os }}
          path: |
            dist-packages/
            dist/

  # Bundle Analysis
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    needs: [build-matrix]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build for analysis
        run: npm run build

      - name: Analyze bundle size
        run: |
          npm run analyze:bundle || echo "Bundle analysis not configured"
          npm run budget:check || echo "Bundle budget check not configured"

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            bundle-analysis/
            dist/

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-matrix]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: |
          npm run test:performance:baseline || echo "Performance baseline not configured"
          npm run performance:quality-gates || echo "Performance gates not configured"

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            performance/
            lighthouse-reports/

  # Final Validation
  validate:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [security-audit, lint-and-format, build-matrix, test-suite, coverage]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check job statuses
        run: |
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Lint & Format: ${{ needs.lint-and-format.result }}"
          echo "Build Matrix: ${{ needs.build-matrix.result }}"
          echo "Test Suite: ${{ needs.test-suite.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"

          if [[ "${{ needs.security-audit.result }}" == "failure" ]] ||
             [[ "${{ needs.lint-and-format.result }}" == "failure" ]] ||
             [[ "${{ needs.build-matrix.result }}" == "failure" ]] ||
             [[ "${{ needs.test-suite.result }}" == "failure" ]] ||
             [[ "${{ needs.coverage.result }}" == "failure" ]]; then
            echo "❌ CI Pipeline failed"
            exit 1
          else
            echo "✅ CI Pipeline passed"
          fi

      - name: Generate CI summary
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint-and-format.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Matrix | ${{ needs.build-matrix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | ${{ needs.test-suite.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result }} |" >> $GITHUB_STEP_SUMMARY