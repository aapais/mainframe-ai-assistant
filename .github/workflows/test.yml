name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit and Integration Tests
  test-unit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:ci

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Accessibility Tests
  test-accessibility:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run accessibility tests
      run: npm run test -- --testNamePattern="Accessibility"

    - name: Generate accessibility report
      run: |
        npm run test:coverage -- --testNamePattern="Accessibility" --coverageReporters=html
        mkdir -p accessibility-reports
        cp -r coverage/lcov-report accessibility-reports/

    - name: Upload accessibility reports
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-reports
        path: accessibility-reports/

  # Performance Tests
  test-performance:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance tests
      run: npm run test -- --testNamePattern="Performance"

    - name: Generate performance report
      run: |
        mkdir -p performance-reports
        npm run test -- --testNamePattern="Performance" --verbose --outputFile=performance-reports/results.json

    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports
        path: performance-reports/

  # Visual Regression Tests
  test-visual:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run visual regression tests
      run: npm run test -- --testNamePattern="VisualRegression"

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-regression-diffs
        path: src/renderer/components/__tests__/__image_snapshots__/

  # Cross-browser Tests
  test-cross-browser:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox, safari, edge]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup browser - ${{ matrix.browser }}
      uses: browser-actions/setup-chrome@latest
      if: matrix.browser == 'chrome'

    - name: Setup browser - Firefox
      uses: browser-actions/setup-firefox@latest
      if: matrix.browser == 'firefox'

    - name: Setup browser - Edge
      uses: browser-actions/setup-edge@latest
      if: matrix.browser == 'edge'

    - name: Run cross-browser tests
      run: npm run test:browser -- --browser=${{ matrix.browser }}
      env:
        BROWSER: ${{ matrix.browser }}

    - name: Upload browser test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: browser-test-results-${{ matrix.browser }}
        path: test-results/

  # Database Tests
  test-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run database tests
      run: npm run test:database:ci

    - name: Upload database test results
      uses: actions/upload-artifact@v4
      with:
        name: database-test-results
        path: test-results/database/

  # Security Tests
  test-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit

    - name: Run SAST scan
      run: |
        npx eslint src --ext .ts,.tsx --format json --output-file security-report.json || true
        
    - name: Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: security-report.json

  # Integration Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [test-unit, test-accessibility, test-performance, test-visual, test-cross-browser, test-database]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate comprehensive test report
      run: |
        echo "# Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        
        echo "## Unit Tests" >> test-summary.md
        if [ -f unit-test-results/results.json ]; then
          echo "✅ Unit tests passed" >> test-summary.md
        else
          echo "❌ Unit tests failed" >> test-summary.md
        fi
        
        echo "## Accessibility Tests" >> test-summary.md
        if [ -d accessibility-reports ]; then
          echo "✅ Accessibility tests completed" >> test-summary.md
        else
          echo "❌ Accessibility tests failed" >> test-summary.md
        fi
        
        echo "## Performance Tests" >> test-summary.md
        if [ -d performance-reports ]; then
          echo "✅ Performance tests completed" >> test-summary.md
        else
          echo "❌ Performance tests failed" >> test-summary.md
        fi
        
        echo "## Visual Regression Tests" >> test-summary.md
        if [ -d visual-regression-diffs ]; then
          echo "⚠️ Visual regression tests found differences" >> test-summary.md
        else
          echo "✅ Visual regression tests passed" >> test-summary.md
        fi
        
        echo "## Cross-browser Tests" >> test-summary.md
        browsers=("chrome" "firefox" "edge")
        for browser in "${browsers[@]}"; do
          if [ -d "browser-test-results-$browser" ]; then
            echo "❌ $browser tests failed" >> test-summary.md
          else
            echo "✅ $browser tests passed" >> test-summary.md
          fi
        done

    - name: Comment on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Upload comprehensive report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: test-summary.md

# Nightly tests for long-running performance and stress tests
  test-nightly:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run stress tests
      run: npm run test:stress

    - name: Run memory leak tests
      run: npm run test:memory

    - name: Run long-running performance tests
      run: npm run test:performance:extended

    - name: Upload nightly test results
      uses: actions/upload-artifact@v4
      with:
        name: nightly-test-results
        path: test-results/nightly/

# Scheduled nightly tests
on:
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily