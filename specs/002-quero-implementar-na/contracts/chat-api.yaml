openapi: 3.0.0
info:
  title: RAG Chatbot API
  version: 1.0.0
  description: API for RAG-powered chatbot in documentation section

paths:
  /api/chat/conversations:
    post:
      summary: Create new conversation
      operationId: createConversation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 500
                  description: Optional conversation title
                model_id:
                  type: string
                  maxLength: 100
                  description: Initial model selection
      responses:
        '201':
          description: Conversation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    get:
      summary: List user's conversations
      operationId: listConversations
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
            minimum: 0
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/chat/conversations/{conversationId}:
    get:
      summary: Get conversation with messages
      operationId: getConversation
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Conversation'
                  - type: object
                    properties:
                      messages:
                        type: array
                        items:
                          $ref: '#/components/schemas/Message'
                        description: Last 5 messages as per FR-011
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

    delete:
      summary: Delete conversation
      operationId: deleteConversation
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Conversation deleted
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/chat/conversations/{conversationId}/messages:
    post:
      summary: Send message to chatbot (streaming response)
      operationId: sendMessage
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  minLength: 1
                  maxLength: 4000
                  description: User's message
                model_id:
                  type: string
                  description: Override conversation model for this message
      responses:
        '200':
          description: Streaming response
          content:
            text/event-stream:
              schema:
                type: object
                properties:
                  event:
                    type: string
                    enum: [message, token_warning, error, done]
                  data:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /api/chat/models:
    get:
      summary: Get available models for user
      operationId: getAvailableModels
      responses:
        '200':
          description: List of available models
          content:
            application/json:
              schema:
                type: object
                properties:
                  models:
                    type: array
                    items:
                      $ref: '#/components/schemas/Model'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    Conversation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
        title:
          type: string
          maxLength: 500
        model_id:
          type: string
          maxLength: 100
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversation_id:
          type: string
          format: uuid
        role:
          type: string
          enum: [user, assistant, system]
        content:
          type: string
        model_id:
          type: string
        tokens_used:
          type: integer
          minimum: 0
        created_at:
          type: string
          format: date-time

    Model:
      type: object
      properties:
        model_id:
          type: string
        provider:
          type: string
          enum: [openai, google, azure]
        display_name:
          type: string
        max_tokens:
          type: integer
        active:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []