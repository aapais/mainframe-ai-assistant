<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Accenture Mainframe AI Assistant</title>
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0/dist/chartjs-plugin-datalabels.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .ai-glow {
            box-shadow: 0 0 20px rgba(147, 51, 234, 0.3);
            animation: ai-pulse 2s infinite;
        }
        @keyframes ai-pulse {
            0%, 100% { box-shadow: 0 0 20px rgba(147, 51, 234, 0.3); }
            50% { box-shadow: 0 0 30px rgba(147, 51, 234, 0.5); }
        }
        .similarity-bar {
            background: linear-gradient(90deg, #f87171, #fbbf24, #34d399);
        }
        .rag-highlight {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }
        .semantic-search {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .real-time-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        .ai-badge {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            font-weight: 600;
        }
        .category-prediction {
            border: 2px dashed #8b5cf6;
            background: rgba(139, 92, 246, 0.1);
        }

        /* Enhanced Charts Styles */
        .chart-container {
            position: relative;
            height: 400px;
            width: 100%;
            transition: all 0.3s ease;
        }

        .chart-container:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

        .chart-controls {
            display: flex;
            gap: 8px;
        }

        .chart-control-btn {
            padding: 4px 12px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            border: 1px solid #e5e7eb;
            background: white;
        }

        .chart-control-btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-color: transparent;
        }

        .chart-control-btn:hover {
            background: #f3f4f6;
        }

        .chart-control-btn.active:hover {
            background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
        }

        /* Modern Button Hierarchy */
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #64748b 0%, #475569 100%);
            color: white;
            padding: 10px 20px;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #475569 0%, #334155 100%);
        }

        .btn-tertiary {
            background: transparent;
            color: #64748b;
            padding: 8px 16px;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-tertiary:hover {
            background: #f8fafc;
            border-color: #cbd5e1;
        }

        .trend-chart-mini {
            height: 60px;
            width: 100%;
            margin-top: 8px;
        }

        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
            animation: pulse 2s infinite;
        }

        .status-live {
            background: #10b981;
        }

        .status-warning {
            background: #f59e0b;
        }

        .status-error {
            background: #ef4444;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .chart-legend-custom {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
            margin-top: 16px;
            justify-content: center;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            cursor: pointer;
            transition: opacity 0.2s ease;
        }

        .legend-item:hover {
            opacity: 0.8;
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 4px;
        }

        /* === VISUAL ENHANCEMENT SPECIALIST ADDITIONS === */

        /* Enhanced Card Animations and Micro-interactions */
        .card-hover {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .card-hover:hover {
            transform: translateY(-4px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }

        .card-hover::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
            transition: left 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 1;
        }

        .card-hover:hover::before {
            left: 100%;
        }

        /* Enhanced Button Animations */
        .btn-enhanced {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            transform-style: preserve-3d;
        }

        .btn-enhanced:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

        .btn-enhanced:active {
            transform: translateY(0);
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .btn-enhanced::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.3s ease, height 0.3s ease;
        }

        .btn-enhanced:hover::before {
            width: 300px;
            height: 300px;
        }

        /* Loading States and Skeleton Loaders */
        .skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
        }

        @keyframes loading {
            0% { background-position: 200% 0; }
            100% { background-position: -200% 0; }
        }

        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            display: inline-block;
            margin-right: 8px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Fade-in Animations */
        .fade-in {
            animation: fadeIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
            opacity: 0;
        }

        .fade-in-up {
            animation: fadeInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
            opacity: 0;
            transform: translateY(20px);
        }

        .fade-in-left {
            animation: fadeInLeft 0.7s cubic-bezier(0.4, 0, 0.2, 1) forwards;
            opacity: 0;
            transform: translateX(-20px);
        }

        @keyframes fadeIn {
            to { opacity: 1; }
        }

        @keyframes fadeInUp {
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeInLeft {
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        /* Staggered Animation Delays */
        .fade-in-delay-1 { animation-delay: 0.1s; }
        .fade-in-delay-2 { animation-delay: 0.2s; }
        .fade-in-delay-3 { animation-delay: 0.3s; }
        .fade-in-delay-4 { animation-delay: 0.4s; }
        .fade-in-delay-5 { animation-delay: 0.5s; }

        /* Enhanced Gradients and Shadows */
        .gradient-enhanced {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }

        .gradient-enhanced::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
            opacity: 0;
            transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: inherit;
        }

        .gradient-enhanced:hover::before {
            opacity: 1;
        }

        /* Metric Card Animations */
        .metric-card {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            background: linear-gradient(145deg, #ffffff 0%, #f8fafc 100%);
            border: 1px solid rgba(226, 232, 240, 0.8);
        }

        .metric-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.08);
            border-color: rgba(147, 51, 234, 0.3);
        }

        .metric-value {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .metric-card:hover .metric-value {
            transform: scale(1.05);
            color: #7c3aed;
        }

        /* Enhanced AI Glow with improved hover */
        .ai-glow:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 40px rgba(147, 51, 234, 0.4);
        }

        /* Enhanced existing classes with transitions */
        .rag-highlight:hover {
            background: linear-gradient(45deg, #764ba2, #667eea);
            transform: scale(1.02);
        }

        .semantic-search:hover {
            background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
            transform: translateY(-1px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .ai-badge:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

        .category-prediction:hover {
            background: rgba(139, 92, 246, 0.15);
            border-color: #7c3aed;
        }

        /* Input Focus Animations */
        .input-enhanced {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .input-enhanced:focus {
            transform: translateY(-1px);
            box-shadow: 0 8px 25px rgba(147, 51, 234, 0.15);
        }

        /* Modal Animations */
        .modal-backdrop {
            backdrop-filter: blur(4px);
            animation: fadeIn 0.3s ease-out;
        }

        .modal-content {
            animation: modalSlideUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }

        @keyframes modalSlideUp {
            from {
                opacity: 0;
                transform: translateY(50px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        /* Notification Animations */
        .notification {
            animation: slideInRight 0.5s cubic-bezier(0.4, 0, 0.2, 1);
        }

        @keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(100%);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        /* Progress Bar Animations */
        .progress-bar-animated {
            background-size: 200% 100%;
            animation: progressShimmer 2s linear infinite;
        }

        @keyframes progressShimmer {
            0% { background-position: -200% 0; }
            100% { background-position: 200% 0; }
        }

        /* Reduce motion for accessibility */
        @media (prefers-reduced-motion: reduce) {
            * {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel" data-type="module">
        const { useState, useEffect, useRef, useMemo, useCallback } = React;

        // API OPTIMIZER - Performance Enhancements
        const apiCache = new Map();
        const cacheConfig = { ttl: 300000, maxSize: 100 };

        const getCachedData = (key) => {
            const cached = apiCache.get(key);
            if (cached && Date.now() - cached.timestamp < cacheConfig.ttl) {
                return cached.data;
            }
            if (cached) apiCache.delete(key);
            return null;
        };

        const setCachedData = (key, data) => {
            if (apiCache.size >= cacheConfig.maxSize) {
                const firstKey = apiCache.keys().next().value;
                apiCache.delete(firstKey);
            }
            apiCache.set(key, { data, timestamp: Date.now() });
        };

        const useDebounce = (value, delay) => {
            const [debouncedValue, setDebouncedValue] = useState(value);
            useEffect(() => {
                const handler = setTimeout(() => setDebouncedValue(value), delay);
                return () => clearTimeout(handler);
            }, [value, delay]);
            return debouncedValue;
        };

        // Performance Monitor
        window.perfMonitor = window.perfMonitor || {
            metrics: new Map(),
            startTimer: (operation) => {
                this.metrics.set(operation, { start: performance.now() });
            },
            endTimer: (operation) => {
                const metric = this.metrics.get(operation);
                if (metric) {
                    metric.duration = performance.now() - metric.start;
                    console.log(`⏱️ ${operation}: ${metric.duration.toFixed(2)}ms`);
                }
            }
        };

        // API Base URL for AI features
        const API_BASE = 'http://localhost:3001';

        // AI-powered Auto-categorization Component for "Criar Incidente" tab
        const AutoCategorizationForm = ({ onSubmit, isSubmitting }) => {
            const [formData, setFormData] = useState({
                title: '',
                description: '',
                priority: 'Média',
                assignee: '',
                category: '',
                predictedCategory: null,
                confidence: 0
            });
            const [isAnalyzing, setIsAnalyzing] = useState(false);

            const analyzeIncident = async () => {
                if (!formData.title && !formData.description) return;

                setIsAnalyzing(true);
                try {
                    const response = await fetch(`${API_BASE}/api/ai/categorize`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            title: formData.title,
                            description: formData.description
                        })
                    });

                    if (response.ok) {
                        const result = await response.json();
                        setFormData(prev => ({
                            ...prev,
                            predictedCategory: result.category,
                            confidence: result.confidence,
                            category: result.category
                        }));
                    }
                } catch (error) {
                    console.error('Auto-categorization failed:', error);
                    // Fallback categorization logic
                    const title = formData.title.toLowerCase();
                    const desc = formData.description.toLowerCase();

                    let category = 'Geral';
                    let confidence = 75;

                    if (title.includes('cics') || desc.includes('cics')) {
                        category = 'CICS';
                        confidence = 85;
                    } else if (title.includes('db2') || desc.includes('database')) {
                        category = 'DB2';
                        confidence = 80;
                    } else if (title.includes('batch') || desc.includes('job')) {
                        category = 'Batch';
                        confidence = 82;
                    } else if (title.includes('ims')) {
                        category = 'IMS';
                        confidence = 88;
                    } else if (title.includes('storage') || title.includes('dasd')) {
                        category = 'Storage';
                        confidence = 90;
                    }

                    setFormData(prev => ({
                        ...prev,
                        predictedCategory: category,
                        confidence,
                        category
                    }));
                }
                setIsAnalyzing(false);
            };

            useEffect(() => {
                const debounceTimer = setTimeout(() => {
                    if (formData.title || formData.description) {
                        analyzeIncident();
                    }
                }, 1000);

                return () => clearTimeout(debounceTimer);
            }, [formData.title, formData.description]);

            const handleSubmit = (e) => {
                e.preventDefault();
                onSubmit({
                    ...formData,
                    id: Date.now(),
                    status: 'Aberto',
                    aiGenerated: true
                });
            };

            return (
                <div className="bg-white rounded-lg shadow-lg p-6 ai-glow card-hover fade-in-up">
                    <div className="flex items-center gap-3 mb-6">
                        <div className="ai-badge">🤖 AI-POWERED</div>
                        <h2 className="text-2xl font-bold">Criação de Incidente com IA</h2>
                    </div>

                    <form onSubmit={handleSubmit} className="space-y-4">
                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Título do Incidente *
                            </label>
                            <input
                                type="text"
                                value={formData.title}
                                onChange={(e) => setFormData({...formData, title: e.target.value})}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                                placeholder="Ex: Erro CICS região PROD01"
                                required
                            />
                        </div>

                        <div>
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Descrição Detalhada *
                            </label>
                            <textarea
                                value={formData.description}
                                onChange={(e) => setFormData({...formData, description: e.target.value})}
                                rows="4"
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                                placeholder="Descreva o problema em detalhes..."
                                required
                            />
                        </div>

                        {/* AI Category Prediction */}
                        {formData.predictedCategory && (
                            <div className="category-prediction p-4 rounded-lg">
                                <div className="flex items-center justify-between mb-2">
                                    <h3 className="font-semibold text-purple-800">🎯 Categoria Prevista por IA</h3>
                                    {isAnalyzing && <div className="text-sm text-gray-500">Analisando...</div>}
                                </div>
                                <div className="flex items-center gap-3">
                                    <div className="text-lg font-bold text-purple-700">{formData.predictedCategory}</div>
                                    <div className="flex items-center gap-1">
                                        <span className="text-sm text-gray-600">Confiança:</span>
                                        <div className="w-24 bg-gray-200 rounded-full h-2">
                                            <div
                                                className="bg-purple-600 h-2 rounded-full transition-all duration-300"
                                                style={{width: `${formData.confidence}%`}}
                                            ></div>
                                        </div>
                                        <span className="text-sm font-medium text-purple-600">{formData.confidence}%</span>
                                    </div>
                                </div>
                            </div>
                        )}

                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Prioridade</label>
                                <select
                                    value={formData.priority}
                                    onChange={(e) => setFormData({...formData, priority: e.target.value})}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                                >
                                    <option>Baixa</option>
                                    <option>Média</option>
                                    <option>Alta</option>
                                    <option>Crítica</option>
                                </select>
                            </div>
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-1">Responsável</label>
                                <input
                                    type="text"
                                    value={formData.assignee}
                                    onChange={(e) => setFormData({...formData, assignee: e.target.value})}
                                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500"
                                    placeholder="Nome do responsável"
                                />
                            </div>
                        </div>

                        <button
                            type="submit"
                            disabled={isSubmitting || !formData.title || !formData.description}
                            className="w-full py-3 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg font-semibold disabled:opacity-50 disabled:cursor-not-allowed hover:from-purple-700 hover:to-blue-700 transition-all btn-enhanced gradient-enhanced"
                        >
                            {isSubmitting ? 'Criando Incidente...' : '🚀 Criar Incidente com IA'}
                        </button>
                    </form>
                </div>
            );
        };

        // Semantic Search Interface Component for Knowledge Base tab
        const SemanticSearchInterface = ({ onResultsChange }) => {
            const [query, setQuery] = useState('');
            const [searchMode, setSearchMode] = useState('semantic');
            const [results, setResults] = useState([]);
            const [isSearching, setIsSearching] = useState(false);
            const [searchHistory, setSearchHistory] = useState([]);

            const performSemanticSearch = async (searchQuery, mode = 'semantic') => {
                if (!searchQuery.trim()) {
                    setResults([]);
                    onResultsChange([]);
                    return;
                }

                setIsSearching(true);
                try {
                    const response = await fetch(`${API_BASE}/api/knowledge/semantic-search`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            query: searchQuery,
                            mode: mode,
                            limit: 10
                        })
                    });

                    if (response.ok) {
                        const searchResults = await response.json();
                        setResults(searchResults);
                        onResultsChange(searchResults);

                        setSearchHistory(prev => [
                            { query: searchQuery, timestamp: new Date(), results: searchResults.length },
                            ...prev.slice(0, 4)
                        ]);
                    }
                } catch (error) {
                    console.error('Semantic search failed:', error);
                    // Fallback to mock results
                    const mockResults = [
                        {
                            id: 1,
                            title: "Solução para erro CICS ABEND",
                            content: "Procedimentos para resolução de ABEND S0C7 em regiões CICS",
                            similarity: 0.92,
                            category: "CICS",
                            lastUpdated: "2024-01-15"
                        },
                        {
                            id: 2,
                            title: "Configuração de memória CICS",
                            content: "Ajustes de parâmetros EDSALIM e DSALIM para otimização",
                            similarity: 0.87,
                            category: "CICS",
                            lastUpdated: "2024-01-10"
                        }
                    ];
                    setResults(mockResults);
                    onResultsChange(mockResults);
                }
                setIsSearching(false);
            };

            const handleSearch = (e) => {
                e.preventDefault();
                performSemanticSearch(query, searchMode);
            };

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <div className="flex items-center gap-3 mb-6">
                        <div className="semantic-search px-3 py-1 rounded-full text-white text-sm font-semibold">
                            🧠 SEMANTIC SEARCH
                        </div>
                        <h2 className="text-2xl font-bold">Busca Inteligente na Base de Conhecimento</h2>
                    </div>

                    <form onSubmit={handleSearch} className="space-y-4">
                        <div className="flex gap-4">
                            <div className="flex-1">
                                <input
                                    type="text"
                                    value={query}
                                    onChange={(e) => setQuery(e.target.value)}
                                    className="w-full p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg"
                                    placeholder="🔍 Digite sua pergunta em linguagem natural..."
                                />
                            </div>
                            <button
                                type="submit"
                                disabled={isSearching || !query.trim()}
                                className="px-6 py-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg font-semibold disabled:opacity-50 hover:from-blue-700 hover:to-purple-700 transition-all btn-enhanced gradient-enhanced"
                            >
                                {isSearching ? '🔄' : '🔍'} Buscar
                            </button>
                        </div>

                        <div className="flex gap-2">
                            {['semantic', 'exact', 'fuzzy'].map(mode => (
                                <button
                                    key={mode}
                                    type="button"
                                    onClick={() => setSearchMode(mode)}
                                    className={`px-4 py-2 rounded-full text-sm font-medium transition-all ${
                                        searchMode === mode
                                            ? 'bg-blue-600 text-white'
                                            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                    }`}
                                >
                                    {mode === 'semantic' ? '🧠 Semântica' :
                                     mode === 'exact' ? '🎯 Exata' : '🌊 Fuzzy'}
                                </button>
                            ))}
                        </div>
                    </form>

                    {/* Search Results */}
                    {results.length > 0 && (
                        <div className="mt-6">
                            <h3 className="text-lg font-semibold mb-4">
                                📊 Resultados ({results.length}) - Ordenados por Relevância
                            </h3>
                            <div className="space-y-4">
                                {results.map(result => (
                                    <div key={result.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <div className="flex justify-between items-start mb-2">
                                            <h4 className="font-semibold text-lg text-gray-800">{result.title}</h4>
                                            <div className="flex items-center gap-2">
                                                {result.similarity && (
                                                    <div className="flex items-center gap-1">
                                                        <span className="text-xs text-gray-500">Relevância:</span>
                                                        <div className="similarity-bar w-16 h-2 rounded-full">
                                                            <div
                                                                className="h-full bg-green-500 rounded-full"
                                                                style={{width: `${(result.similarity || 0.5) * 100}%`}}
                                                            ></div>
                                                        </div>
                                                        <span className="text-xs font-medium text-green-600">
                                                            {Math.round((result.similarity || 0.5) * 100)}%
                                                        </span>
                                                    </div>
                                                )}
                                                <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">
                                                    {result.category}
                                                </span>
                                            </div>
                                        </div>
                                        <p className="text-gray-600 text-sm mb-2">{result.content}</p>
                                        <div className="flex justify-between items-center text-xs text-gray-500">
                                            <span>Última atualização: {result.lastUpdated}</span>
                                            <button className="text-blue-600 hover:text-blue-800 font-medium">
                                                Ver detalhes →
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    {/* Search History */}
                    {searchHistory.length > 0 && (
                        <div className="mt-6 pt-4 border-t border-gray-200">
                            <h4 className="text-sm font-medium text-gray-700 mb-2">📚 Histórico de Buscas</h4>
                            <div className="flex flex-wrap gap-2">
                                {searchHistory.map((search, index) => (
                                    <button
                                        key={index}
                                        onClick={() => {
                                            setQuery(search.query);
                                            performSemanticSearch(search.query, searchMode);
                                        }}
                                        className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-1 rounded-full transition-colors"
                                    >
                                        {search.query} ({search.results})
                                    </button>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            );
        };

        // Similar Incidents Viewer Component for enhanced Incidentes tab
        const SimilarIncidentsViewer = ({ currentIncident, onSelectSimilar }) => {
            const [similarIncidents, setSimilarIncidents] = useState([]);
            const [loading, setLoading] = useState(false);
            const [viewMode, setViewMode] = useState('grid');

            useEffect(() => {
                if (currentIncident) {
                    findSimilarIncidents();
                }
            }, [currentIncident]);

            const findSimilarIncidents = async () => {
                setLoading(true);
                try {
                    const response = await fetch(`${API_BASE}/api/incidents/find-similar`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            title: currentIncident.title,
                            description: currentIncident.description,
                            category: currentIncident.category
                        })
                    });

                    if (response.ok) {
                        const similar = await response.json();
                        setSimilarIncidents(similar);
                    }
                } catch (error) {
                    console.error('Failed to find similar incidents:', error);
                    // Mock similar incidents
                    setSimilarIncidents([
                        {
                            id: 101,
                            title: "Erro CICS região PROD02 - Problema similar",
                            description: "Região CICS apresentando comportamento instável",
                            similarity: 94,
                            status: "Resolvido",
                            resolution: "Ajuste de parâmetros de memória EDSALIM e DSALIM",
                            resolutionTime: "2h 15min",
                            resolvedBy: "Maria Santos",
                            resolvedDate: "2024-01-20",
                            category: "CICS"
                        },
                        {
                            id: 87,
                            title: "CICS ABEND S0C7 - Região produção",
                            description: "Falha recorrente em transações CICS",
                            similarity: 89,
                            status: "Resolvido",
                            resolution: "Restart da região com novos parâmetros de configuração",
                            resolutionTime: "1h 30min",
                            resolvedBy: "João Silva",
                            resolvedDate: "2024-01-18",
                            category: "CICS"
                        }
                    ]);
                }
                setLoading(false);
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center py-8">
                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                        <span className="ml-3 text-gray-600">Buscando incidentes similares...</span>
                    </div>
                );
            }

            return (
                <div className="mt-6">
                    <h4 className="font-semibold mb-3 flex items-center gap-2">
                        📊 Incidentes Similares com IA:
                    </h4>
                    <div className="space-y-2">
                        {similarIncidents.map(inc => (
                            <div key={inc.id} className="p-3 bg-blue-50 rounded flex justify-between items-center shadow-sm">
                                <div className="flex-1">
                                    <span className="font-medium">#{inc.id}</span> - {inc.title}
                                    <div className="text-sm text-gray-600 mt-1">
                                        Resolução: {inc.resolution}
                                    </div>
                                </div>
                                <div className="text-right">
                                    <span className="text-sm font-medium text-green-600">{inc.similarity}% similar</span>
                                    <div className="text-xs text-gray-500">{inc.status}</div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            );
        };

        // Enhanced Chart Components with Chart.js
        const ModernCategoryChart = ({ categoryStats, onCategoryClick }) => {
            const chartRef = useRef(null);
            const chartInstance = useRef(null);
            const [chartType, setChartType] = useState('doughnut');

            useEffect(() => {
                if (chartRef.current && Object.keys(categoryStats).length > 0) {
                    const ctx = chartRef.current.getContext('2d');

                    // Destroy existing chart
                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }

                    const categories = Object.keys(categoryStats);
                    const values = Object.values(categoryStats);

                    // Modern gradient colors
                    const gradientColors = [
                        ['#667eea', '#764ba2'],
                        ['#f093fb', '#f5576c'],
                        ['#4facfe', '#00f2fe'],
                        ['#43e97b', '#38f9d7'],
                        ['#ffecd2', '#fcb69f'],
                        ['#a8edea', '#fed6e3'],
                        ['#d299c2', '#fef9d7']
                    ];

                    const backgroundColors = categories.map((_, index) => {
                        const canvas = document.createElement('canvas');
                        const canvasCtx = canvas.getContext('2d');
                        const gradient = canvasCtx.createLinearGradient(0, 0, 0, 400);
                        const colors = gradientColors[index % gradientColors.length];
                        gradient.addColorStop(0, colors[0]);
                        gradient.addColorStop(1, colors[1]);
                        return gradient;
                    });

                    const config = {
                        type: chartType,
                        data: {
                            labels: categories,
                            datasets: [{
                                data: values,
                                backgroundColor: backgroundColors,
                                borderColor: '#ffffff',
                                borderWidth: 3,
                                hoverBorderWidth: 5,
                                hoverOffset: 10
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false // Custom legend below
                                },
                                tooltip: {
                                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                    titleColor: '#fff',
                                    bodyColor: '#fff',
                                    borderColor: '#667eea',
                                    borderWidth: 1,
                                    cornerRadius: 8,
                                    displayColors: false,
                                    callbacks: {
                                        title: (context) => context[0].label,
                                        label: (context) => {
                                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                            const percentage = ((context.raw / total) * 100).toFixed(1);
                                            return `${context.raw} incidentes (${percentage}%)`;
                                        }
                                    }
                                }
                            },
                            animation: {
                                animateRotate: true,
                                animateScale: true,
                                duration: 2000,
                                easing: 'easeOutQuart'
                            },
                            onClick: (event, elements) => {
                                if (elements.length > 0) {
                                    const index = elements[0].index;
                                    const category = categories[index];
                                    onCategoryClick && onCategoryClick(category);
                                }
                            }
                        }
                    };

                    chartInstance.current = new Chart(ctx, config);
                }

                return () => {
                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }
                };
            }, [categoryStats, chartType]);

            const handleChartTypeChange = (type) => {
                setChartType(type);
            };

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <div className="chart-header">
                        <h3 className="text-lg font-semibold flex items-center gap-2">
                            <span className="status-indicator status-live"></span>
                            Incidentes por Categoria
                        </h3>
                        <div className="chart-controls">
                            <button
                                className={`chart-control-btn ${chartType === 'doughnut' ? 'active' : ''}`}
                                onClick={() => handleChartTypeChange('doughnut')}
                            >
                                Donut
                            </button>
                            <button
                                className={`chart-control-btn ${chartType === 'pie' ? 'active' : ''}`}
                                onClick={() => handleChartTypeChange('pie')}
                            >
                                Pizza
                            </button>
                            <button
                                className={`chart-control-btn ${chartType === 'polarArea' ? 'active' : ''}`}
                                onClick={() => handleChartTypeChange('polarArea')}
                            >
                                Polar
                            </button>
                        </div>
                    </div>
                    <div className="chart-container">
                        <canvas ref={chartRef}></canvas>
                    </div>

                    {/* Custom Legend */}
                    <div className="chart-legend-custom">
                        {Object.entries(categoryStats).map(([category, count], index) => {
                            const gradientColors = [
                                ['#667eea', '#764ba2'],
                                ['#f093fb', '#f5576c'],
                                ['#4facfe', '#00f2fe'],
                                ['#43e97b', '#38f9d7'],
                                ['#ffecd2', '#fcb69f'],
                                ['#a8edea', '#fed6e3'],
                                ['#d299c2', '#fef9d7']
                            ];
                            const colors = gradientColors[index % gradientColors.length];

                            return (
                                <div
                                    key={category}
                                    className="legend-item"
                                    onClick={() => onCategoryClick && onCategoryClick(category)}
                                >
                                    <div
                                        className="legend-color"
                                        style={{
                                            background: `linear-gradient(135deg, ${colors[0]} 0%, ${colors[1]} 100%)`
                                        }}
                                    ></div>
                                    <span>{category} ({count})</span>
                                </div>
                            );
                        })}
                    </div>
                </div>
            );
        };

        const ModernTrendChart = ({ weeklyTrend, incidents }) => {
            const chartRef = useRef(null);
            const chartInstance = useRef(null);
            const [timeRange, setTimeRange] = useState('week');

            useEffect(() => {
                if (chartRef.current) {
                    const ctx = chartRef.current.getContext('2d');

                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }

                    // Generate more detailed data based on timeRange
                    let chartData, labels;

                    if (timeRange === 'week') {
                        labels = weeklyTrend.map(d => d.day);
                        chartData = weeklyTrend.map(d => d.count);
                    } else if (timeRange === 'month') {
                        labels = Array.from({length: 30}, (_, i) => `${i + 1}`);
                        chartData = Array.from({length: 30}, () => Math.floor(Math.random() * 8) + 1);
                    } else {
                        labels = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun'];
                        chartData = [45, 52, 38, 64, 48, 67];
                    }

                    // Create gradient
                    const gradient = ctx.createLinearGradient(0, 0, 0, 400);
                    gradient.addColorStop(0, 'rgba(102, 126, 234, 0.8)');
                    gradient.addColorStop(1, 'rgba(118, 75, 162, 0.1)');

                    const config = {
                        type: 'line',
                        data: {
                            labels,
                            datasets: [{
                                label: 'Incidentes',
                                data: chartData,
                                borderColor: '#667eea',
                                backgroundColor: gradient,
                                borderWidth: 3,
                                fill: true,
                                tension: 0.4,
                                pointBackgroundColor: '#667eea',
                                pointBorderColor: '#ffffff',
                                pointBorderWidth: 3,
                                pointRadius: 6,
                                pointHoverRadius: 8,
                                pointHoverBackgroundColor: '#764ba2',
                                pointHoverBorderColor: '#ffffff'
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            interaction: {
                                intersect: false,
                                mode: 'index'
                            },
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                    titleColor: '#fff',
                                    bodyColor: '#fff',
                                    borderColor: '#667eea',
                                    borderWidth: 1,
                                    cornerRadius: 8,
                                    displayColors: false,
                                    callbacks: {
                                        title: (context) => {
                                            return timeRange === 'week' ? context[0].label :
                                                   timeRange === 'month' ? `Dia ${context[0].label}` :
                                                   context[0].label;
                                        },
                                        label: (context) => `${context.raw} incidentes`
                                    }
                                }
                            },
                            scales: {
                                x: {
                                    grid: {
                                        display: false
                                    },
                                    ticks: {
                                        color: '#6b7280'
                                    }
                                },
                                y: {
                                    beginAtZero: true,
                                    grid: {
                                        color: 'rgba(107, 114, 128, 0.1)',
                                        borderDash: [5, 5]
                                    },
                                    ticks: {
                                        color: '#6b7280',
                                        stepSize: 1
                                    }
                                }
                            },
                            animation: {
                                duration: 2000,
                                easing: 'easeOutQuart'
                            },
                            onHover: (event, elements) => {
                                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
                            }
                        }
                    };

                    chartInstance.current = new Chart(ctx, config);
                }

                return () => {
                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }
                };
            }, [weeklyTrend, timeRange]);

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <div className="chart-header">
                        <h3 className="text-lg font-semibold flex items-center gap-2">
                            <span className="status-indicator status-live"></span>
                            Tendência Temporal
                        </h3>
                        <div className="chart-controls">
                            <button
                                className={`chart-control-btn ${timeRange === 'week' ? 'active' : ''}`}
                                onClick={() => setTimeRange('week')}
                            >
                                Semana
                            </button>
                            <button
                                className={`chart-control-btn ${timeRange === 'month' ? 'active' : ''}`}
                                onClick={() => setTimeRange('month')}
                            >
                                Mês
                            </button>
                            <button
                                className={`chart-control-btn ${timeRange === 'semester' ? 'active' : ''}`}
                                onClick={() => setTimeRange('semester')}
                            >
                                Semestre
                            </button>
                        </div>
                    </div>
                    <div className="chart-container">
                        <canvas ref={chartRef}></canvas>
                    </div>
                </div>
            );
        };

        const StatusRealTimeChart = ({ incidents }) => {
            const chartRef = useRef(null);
            const chartInstance = useRef(null);
            const [realTimeData, setRealTimeData] = useState([]);

            useEffect(() => {
                // Simulate real-time data updates
                const interval = setInterval(() => {
                    const now = new Date();
                    const statusCounts = {
                        'Aberto': incidents.filter(i => i.status === 'Aberto').length,
                        'Em Tratamento': incidents.filter(i => i.status === 'Em Tratamento').length,
                        'Resolvido': incidents.filter(i => i.status === 'Resolvido').length,
                        'Fechado': incidents.filter(i => i.status === 'Fechado').length
                    };

                    setRealTimeData(prev => {
                        const newData = [...prev, { time: now, ...statusCounts }];
                        return newData.slice(-20); // Keep last 20 data points
                    });
                }, 5000);

                return () => clearInterval(interval);
            }, [incidents]);

            useEffect(() => {
                if (chartRef.current && realTimeData.length > 0) {
                    const ctx = chartRef.current.getContext('2d');

                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }

                    const config = {
                        type: 'bar',
                        data: {
                            labels: ['Aberto', 'Em Tratamento', 'Resolvido', 'Fechado'],
                            datasets: [{
                                label: 'Status dos Incidentes',
                                data: [
                                    realTimeData[realTimeData.length - 1]?.Aberto || 0,
                                    realTimeData[realTimeData.length - 1]?.['Em Tratamento'] || 0,
                                    realTimeData[realTimeData.length - 1]?.Resolvido || 0,
                                    realTimeData[realTimeData.length - 1]?.Fechado || 0
                                ],
                                backgroundColor: [
                                    'rgba(251, 191, 36, 0.8)', // Amarelo para Aberto
                                    'rgba(59, 130, 246, 0.8)', // Azul para Em Tratamento
                                    'rgba(34, 197, 94, 0.8)', // Verde para Resolvido
                                    'rgba(107, 114, 128, 0.8)' // Cinza para Fechado
                                ],
                                borderColor: [
                                    '#f59e0b',
                                    '#3b82f6',
                                    '#22c55e',
                                    '#6b7280'
                                ],
                                borderWidth: 2,
                                borderRadius: 8,
                                borderSkipped: false
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                    titleColor: '#fff',
                                    bodyColor: '#fff',
                                    borderColor: '#667eea',
                                    borderWidth: 1,
                                    cornerRadius: 8,
                                    displayColors: false,
                                    callbacks: {
                                        label: (context) => `${context.raw} incidentes ${context.label.toLowerCase()}`
                                    }
                                }
                            },
                            scales: {
                                x: {
                                    grid: {
                                        display: false
                                    },
                                    ticks: {
                                        color: '#6b7280'
                                    }
                                },
                                y: {
                                    beginAtZero: true,
                                    grid: {
                                        color: 'rgba(107, 114, 128, 0.1)',
                                        borderDash: [5, 5]
                                    },
                                    ticks: {
                                        color: '#6b7280',
                                        stepSize: 1
                                    }
                                }
                            },
                            animation: {
                                duration: 1000,
                                easing: 'easeOutQuart'
                            }
                        }
                    };

                    chartInstance.current = new Chart(ctx, config);
                }

                return () => {
                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }
                };
            }, [realTimeData]);

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <div className="chart-header">
                        <h3 className="text-lg font-semibold flex items-center gap-2">
                            <span className="status-indicator status-live"></span>
                            Status em Tempo Real
                        </h3>
                        <div className="text-sm text-gray-500">
                            Atualizado a cada 5 segundos
                        </div>
                    </div>
                    <div className="chart-container">
                        <canvas ref={chartRef}></canvas>
                    </div>
                </div>
            );
        };

        // Drill-down Category Chart Component
        const DrillDownCategoryChart = ({ incidents, selectedCategory, onCategorySelect }) => {
            const chartRef = useRef(null);
            const chartInstance = useRef(null);
            const [viewType, setViewType] = useState('category');

            useEffect(() => {
                if (chartRef.current && incidents.length > 0) {
                    const ctx = chartRef.current.getContext('2d');

                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }

                    let data, labels, colors;

                    if (viewType === 'category') {
                        // Category view
                        const categoryData = {};
                        incidents.forEach(incident => {
                            categoryData[incident.category] = (categoryData[incident.category] || 0) + 1;
                        });

                        labels = Object.keys(categoryData);
                        data = Object.values(categoryData);
                        colors = [
                            'rgba(102, 126, 234, 0.8)',
                            'rgba(240, 147, 251, 0.8)',
                            'rgba(79, 172, 254, 0.8)',
                            'rgba(67, 233, 123, 0.8)',
                            'rgba(255, 236, 210, 0.8)',
                            'rgba(168, 237, 234, 0.8)',
                            'rgba(210, 153, 194, 0.8)'
                        ];
                    } else if (viewType === 'priority') {
                        // Priority view
                        const priorityData = {};
                        incidents.forEach(incident => {
                            priorityData[incident.priority] = (priorityData[incident.priority] || 0) + 1;
                        });

                        labels = Object.keys(priorityData);
                        data = Object.values(priorityData);
                        colors = [
                            'rgba(239, 68, 68, 0.8)', // Crítica - Vermelho
                            'rgba(245, 158, 11, 0.8)', // Alta - Laranja
                            'rgba(251, 191, 36, 0.8)', // Média - Amarelo
                            'rgba(34, 197, 94, 0.8)'   // Baixa - Verde
                        ];
                    } else {
                        // Status view
                        const statusData = {};
                        incidents.forEach(incident => {
                            statusData[incident.status] = (statusData[incident.status] || 0) + 1;
                        });

                        labels = Object.keys(statusData);
                        data = Object.values(statusData);
                        colors = [
                            'rgba(251, 191, 36, 0.8)', // Aberto - Amarelo
                            'rgba(59, 130, 246, 0.8)', // Em Tratamento - Azul
                            'rgba(34, 197, 94, 0.8)',  // Resolvido - Verde
                            'rgba(107, 114, 128, 0.8)' // Fechado - Cinza
                        ];
                    }

                    const config = {
                        type: 'doughnut',
                        data: {
                            labels,
                            datasets: [{
                                data,
                                backgroundColor: colors,
                                borderColor: '#ffffff',
                                borderWidth: 3,
                                hoverBorderWidth: 5,
                                hoverOffset: 15,
                                cutout: '60%'
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        padding: 20,
                                        usePointStyle: true,
                                        font: {
                                            size: 12
                                        }
                                    }
                                },
                                tooltip: {
                                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                    titleColor: '#fff',
                                    bodyColor: '#fff',
                                    borderColor: '#667eea',
                                    borderWidth: 1,
                                    cornerRadius: 8,
                                    displayColors: false,
                                    callbacks: {
                                        title: (context) => context[0].label,
                                        label: (context) => {
                                            const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                            const percentage = ((context.raw / total) * 100).toFixed(1);
                                            return `${context.raw} incidentes (${percentage}%)`;
                                        }
                                    }
                                }
                            },
                            animation: {
                                animateRotate: true,
                                animateScale: true,
                                duration: 1500,
                                easing: 'easeOutQuart'
                            },
                            onClick: (event, elements) => {
                                if (elements.length > 0) {
                                    const index = elements[0].index;
                                    const selectedLabel = labels[index];
                                    onCategorySelect && onCategorySelect(selectedLabel);
                                }
                            },
                            onHover: (event, elements) => {
                                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
                            }
                        }
                    };

                    chartInstance.current = new Chart(ctx, config);
                }

                return () => {
                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }
                };
            }, [incidents, viewType]);

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <div className="chart-header">
                        <h3 className="text-lg font-semibold flex items-center gap-2">
                            <span className="status-indicator status-live"></span>
                            Análise Drill-Down
                        </h3>
                        <div className="chart-controls">
                            <button
                                className={`chart-control-btn ${viewType === 'category' ? 'active' : ''}`}
                                onClick={() => setViewType('category')}
                            >
                                Categoria
                            </button>
                            <button
                                className={`chart-control-btn ${viewType === 'priority' ? 'active' : ''}`}
                                onClick={() => setViewType('priority')}
                            >
                                Prioridade
                            </button>
                            <button
                                className={`chart-control-btn ${viewType === 'status' ? 'active' : ''}`}
                                onClick={() => setViewType('status')}
                            >
                                Status
                            </button>
                        </div>
                    </div>
                    <div className="chart-container">
                        <canvas ref={chartRef}></canvas>
                    </div>
                    {selectedCategory && (
                        <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                            <p className="text-sm text-blue-800">
                                <strong>Filtro Ativo:</strong> {selectedCategory}
                                <button
                                    onClick={() => onCategorySelect(null)}
                                    className="ml-2 text-blue-600 hover:text-blue-800"
                                >
                                    ✕ Remover filtro
                                </button>
                            </p>
                        </div>
                    )}
                </div>
            );
        };

        // AI Performance Chart Component
        const AIPerformanceChart = ({ aiMetrics }) => {
            const chartRef = useRef(null);
            const chartInstance = useRef(null);

            useEffect(() => {
                if (chartRef.current) {
                    const ctx = chartRef.current.getContext('2d');

                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }

                    const models = Object.keys(aiMetrics.modelStatus);
                    const accuracies = models.map(model => aiMetrics.modelStatus[model].accuracy);

                    const config = {
                        type: 'radar',
                        data: {
                            labels: models.map(model => model.replace(/([A-Z])/g, ' $1').trim()),
                            datasets: [{
                                label: 'Precisão dos Modelos IA',
                                data: accuracies,
                                backgroundColor: 'rgba(102, 126, 234, 0.2)',
                                borderColor: '#667eea',
                                borderWidth: 3,
                                pointBackgroundColor: '#667eea',
                                pointBorderColor: '#ffffff',
                                pointBorderWidth: 2,
                                pointRadius: 6,
                                pointHoverRadius: 8,
                                pointHoverBackgroundColor: '#764ba2',
                                pointHoverBorderColor: '#ffffff'
                            }]
                        },
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            plugins: {
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                    titleColor: '#fff',
                                    bodyColor: '#fff',
                                    borderColor: '#667eea',
                                    borderWidth: 1,
                                    cornerRadius: 8,
                                    displayColors: false,
                                    callbacks: {
                                        label: (context) => `${context.raw}% de precisão`
                                    }
                                }
                            },
                            scales: {
                                r: {
                                    beginAtZero: true,
                                    max: 100,
                                    grid: {
                                        color: 'rgba(102, 126, 234, 0.2)'
                                    },
                                    angleLines: {
                                        color: 'rgba(102, 126, 234, 0.2)'
                                    },
                                    pointLabels: {
                                        color: '#6b7280',
                                        font: {
                                            size: 12
                                        }
                                    },
                                    ticks: {
                                        color: '#6b7280',
                                        backdropColor: 'transparent'
                                    }
                                }
                            },
                            animation: {
                                duration: 2000,
                                easing: 'easeOutQuart'
                            }
                        }
                    };

                    chartInstance.current = new Chart(ctx, config);
                }

                return () => {
                    if (chartInstance.current) {
                        chartInstance.current.destroy();
                    }
                };
            }, [aiMetrics]);

            return (
                <div className="chart-container" style={{ height: '300px' }}>
                    <canvas ref={chartRef}></canvas>
                </div>
            );
        };

        // AI Metrics Component for enhanced Dashboard
        const AIMetricsSection = () => {
            const [aiMetrics, setAiMetrics] = useState({
                activeModels: 5,
                processedToday: 127,
                avgAccuracy: 94.2,
                modelStatus: {
                    categorization: { status: 'healthy', accuracy: 96.1 },
                    semanticSearch: { status: 'healthy', accuracy: 93.8 },
                    ragPipeline: { status: 'warning', accuracy: 89.3 }
                }
            });

            const getStatusColor = (status) => {
                switch (status) {
                    case 'healthy': return 'text-green-600 bg-green-100';
                    case 'warning': return 'text-yellow-600 bg-yellow-100';
                    case 'error': return 'text-red-600 bg-red-100';
                    default: return 'text-gray-600 bg-gray-100';
                }
            };

            return (
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                    {/* AI Stats Cards */}
                    <div className="lg:col-span-2 bg-white rounded-lg shadow-lg p-6">
                        <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                            <span className="status-indicator status-live"></span>
                            🤖 Métricas de IA em Tempo Real
                        </h3>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                            <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 rounded-lg metric-card fade-in-up fade-in-delay-1">
                                <div className="text-2xl font-bold metric-value">{aiMetrics.activeModels}</div>
                                <div className="text-sm opacity-90">Modelos Ativos</div>
                            </div>
                            <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-4 rounded-lg metric-card fade-in-up fade-in-delay-2">
                                <div className="text-2xl font-bold metric-value">{aiMetrics.processedToday}</div>
                                <div className="text-sm opacity-90">Processados Hoje</div>
                            </div>
                            <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-4 rounded-lg metric-card fade-in-up fade-in-delay-3">
                                <div className="text-2xl font-bold metric-value">{aiMetrics.avgAccuracy.toFixed(1)}%</div>
                                <div className="text-sm opacity-90">Precisão Média</div>
                            </div>
                        </div>

                        <div>
                            <h4 className="font-semibold mb-3">Status dos Modelos</h4>
                            <div className="space-y-2">
                                {Object.entries(aiMetrics.modelStatus).map(([model, data], index) => (
                                    <div key={model} className={`flex items-center justify-between p-3 border border-gray-200 rounded card-hover fade-in-left fade-in-delay-${index + 1}`}>
                                        <div>
                                            <div className="font-medium capitalize">
                                                {model.replace(/([A-Z])/g, ' $1').trim()}
                                            </div>
                                            <div className="text-sm text-gray-600">
                                                Precisão: {data.accuracy}%
                                            </div>
                                        </div>
                                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(data.status)}`}>
                                            {data.status === 'healthy' ? '✅ Saudável' :
                                             data.status === 'warning' ? '⚠️ Atenção' : '❌ Erro'}
                                        </span>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* AI Performance Radar Chart */}
                    <div className="bg-white rounded-lg shadow-lg p-6">
                        <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                            <span className="status-indicator status-live"></span>
                            Performance dos Modelos
                        </h3>
                        <AIPerformanceChart aiMetrics={aiMetrics} />
                    </div>
                </div>
            );
        };

        // Componente SettingsDropdown - NOVA FUNCIONALIDADE
        const SettingsDropdown = () => {
            const [isOpen, setIsOpen] = useState(false);
            const [showModal, setShowModal] = useState(false);
            const [apiKeys, setApiKeys] = useState({
                openai: localStorage.getItem('openai_api_key') || '',
                claude: localStorage.getItem('claude_api_key') || '',
                azure: localStorage.getItem('azure_api_key') || ''
            });
            const [showApiKeys, setShowApiKeys] = useState({
                openai: false,
                claude: false,
                azure: false
            });

            return (
                <div className="relative">
                    <button
                        onClick={() => setIsOpen(!isOpen)}
                        className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                        title="Configurações"
                    >
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                    </button>

                    {isOpen && (
                        <div className="absolute right-0 mt-2 w-64 bg-white shadow-xl rounded-lg p-4 z-50">
                            <h3 className="font-bold mb-3 text-gray-800">Configurações Rápidas</h3>
                            <button className="w-full text-left p-2 hover:bg-gray-100 rounded">👤 Perfil do Usuário</button>
                            <button className="w-full text-left p-2 hover:bg-gray-100 rounded">🔔 Notificações</button>
                            <button className="w-full text-left p-2 hover:bg-gray-100 rounded">🎨 Aparência</button>
                            <button className="w-full text-left p-2 hover:bg-gray-100 rounded">🔒 Segurança</button>
                            <button
                                onClick={() => { setShowModal(true); setIsOpen(false); }}
                                className="w-full text-left p-2 hover:bg-gray-100 rounded">
                                🔑 API Keys
                            </button>
                            <button className="w-full text-left p-2 hover:bg-gray-100 rounded">🔌 Integrações</button>
                            <button className="w-full text-left p-2 hover:bg-gray-100 rounded">💾 Dados</button>
                            <hr className="my-2" />
                            <button
                                onClick={() => { setShowModal(true); setIsOpen(false); }}
                                className="w-full text-left p-2 hover:bg-blue-50 text-blue-600 rounded font-medium"
                            >
                                ⚙️ Todas as Configurações
                            </button>
                        </div>
                    )}

                    {showModal && (
                        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                            <div className="bg-white rounded-lg p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto">
                                <h2 className="text-2xl font-bold mb-4">Configurações Completas do Sistema</h2>
                                <div className="grid grid-cols-2 gap-4">
                                    <div className="border rounded p-4">
                                        <h3 className="font-bold mb-2">Geral</h3>
                                        <label className="block mb-2">
                                            <span className="text-gray-700">Idioma</span>
                                            <select className="mt-1 block w-full rounded border-gray-300">
                                                <option>Português</option>
                                                <option>English</option>
                                            </select>
                                        </label>
                                    </div>
                                    <div className="border rounded p-4">
                                        <h3 className="font-bold mb-2">Notificações</h3>
                                        <label className="flex items-center">
                                            <input type="checkbox" defaultChecked />
                                            <span className="ml-2">Ativar notificações</span>
                                        </label>
                                    </div>

                                    <div className="border rounded p-4 col-span-2">
                                        <h3 className="font-bold mb-4 text-lg">🔑 Configuração de API Keys</h3>
                                        <div className="space-y-4">
                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                                    OpenAI API Key
                                                </label>
                                                <div className="flex gap-2">
                                                    <input
                                                        type={showApiKeys.openai ? "text" : "password"}
                                                        value={apiKeys.openai}
                                                        onChange={(e) => setApiKeys({...apiKeys, openai: e.target.value})}
                                                        placeholder="sk-..."
                                                        className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                    />
                                                    <button
                                                        onClick={() => setShowApiKeys({...showApiKeys, openai: !showApiKeys.openai})}
                                                        className="px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded"
                                                    >
                                                        {showApiKeys.openai ? '🙈' : '👁️'}
                                                    </button>
                                                    <button
                                                        onClick={() => {
                                                            localStorage.setItem('openai_api_key', apiKeys.openai);
                                                            alert('OpenAI API Key salva com sucesso!');
                                                        }}
                                                        className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                                                    >
                                                        Salvar
                                                    </button>
                                                </div>
                                                <p className="text-xs text-gray-500 mt-1">
                                                    Obtenha sua chave em: https://platform.openai.com/api-keys
                                                </p>
                                            </div>

                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                                    Claude API Key (Anthropic)
                                                </label>
                                                <div className="flex gap-2">
                                                    <input
                                                        type={showApiKeys.claude ? "text" : "password"}
                                                        value={apiKeys.claude}
                                                        onChange={(e) => setApiKeys({...apiKeys, claude: e.target.value})}
                                                        placeholder="sk-ant-api03-..."
                                                        className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                    />
                                                    <button
                                                        onClick={() => setShowApiKeys({...showApiKeys, claude: !showApiKeys.claude})}
                                                        className="px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded"
                                                    >
                                                        {showApiKeys.claude ? '🙈' : '👁️'}
                                                    </button>
                                                    <button
                                                        onClick={() => {
                                                            localStorage.setItem('claude_api_key', apiKeys.claude);
                                                            alert('Claude API Key salva com sucesso!');
                                                        }}
                                                        className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                                                    >
                                                        Salvar
                                                    </button>
                                                </div>
                                                <p className="text-xs text-gray-500 mt-1">
                                                    Obtenha sua chave em: https://console.anthropic.com/
                                                </p>
                                            </div>

                                            <div>
                                                <label className="block text-sm font-medium text-gray-700 mb-1">
                                                    Azure OpenAI API Key (Opcional)
                                                </label>
                                                <div className="flex gap-2">
                                                    <input
                                                        type={showApiKeys.azure ? "text" : "password"}
                                                        value={apiKeys.azure}
                                                        onChange={(e) => setApiKeys({...apiKeys, azure: e.target.value})}
                                                        placeholder="Azure API Key..."
                                                        className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                                    />
                                                    <button
                                                        onClick={() => setShowApiKeys({...showApiKeys, azure: !showApiKeys.azure})}
                                                        className="px-3 py-2 bg-gray-100 hover:bg-gray-200 rounded"
                                                    >
                                                        {showApiKeys.azure ? '🙈' : '👁️'}
                                                    </button>
                                                    <button
                                                        onClick={() => {
                                                            localStorage.setItem('azure_api_key', apiKeys.azure);
                                                            alert('Azure API Key salva com sucesso!');
                                                        }}
                                                        className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
                                                    >
                                                        Salvar
                                                    </button>
                                                </div>
                                                <p className="text-xs text-gray-500 mt-1">
                                                    Configure através do Azure Portal
                                                </p>
                                            </div>

                                            <div className="mt-4 p-3 bg-yellow-50 rounded-lg">
                                                <p className="text-sm text-yellow-800">
                                                    ⚠️ <strong>Importante:</strong> As chaves de API são armazenadas localmente no seu navegador.
                                                    Nunca compartilhe suas chaves de API com terceiros.
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <button
                                    onClick={() => setShowModal(false)}
                                    className="mt-6 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                                >
                                    Fechar Configurações
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            );
        };

        // Modal de Visualização - FUNCIONALIDADE CORRIGIDA
        const ViewModal = ({ incident, onClose }) => {
            if (!incident) return null;

            return (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 max-w-3xl w-full max-h-[85vh] overflow-y-auto">
                        <div className="flex justify-between items-start mb-4">
                            <h2 className="text-2xl font-bold">Detalhes do Incidente #{incident.id}</h2>
                            <button onClick={onClose} className="text-gray-500 hover:text-gray-700">✕</button>
                        </div>

                        <div className="space-y-4">
                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="font-semibold text-gray-600">Título:</label>
                                    <p className="mt-1">{incident.title}</p>
                                </div>
                                <div>
                                    <label className="font-semibold text-gray-600">Status:</label>
                                    <p className="mt-1">
                                        <span className={`px-3 py-1 rounded-full text-sm ${
                                            incident.status === 'Aberto' ? 'bg-yellow-100 text-yellow-800' :
                                            incident.status === 'Em Tratamento' ? 'bg-blue-100 text-blue-800' :
                                            incident.status === 'Resolvido' ? 'bg-green-100 text-green-800' :
                                            'bg-gray-100 text-gray-800'
                                        }`}>
                                            {incident.status}
                                        </span>
                                    </p>
                                </div>
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="font-semibold text-gray-600">Prioridade:</label>
                                    <p className="mt-1">{incident.priority}</p>
                                </div>
                                <div>
                                    <label className="font-semibold text-gray-600">Categoria:</label>
                                    <p className="mt-1">{incident.category}</p>
                                </div>
                            </div>

                            <div>
                                <label className="font-semibold text-gray-600">Descrição:</label>
                                <p className="mt-1 p-3 bg-gray-50 rounded">{incident.description}</p>
                            </div>

                            <div>
                                <label className="font-semibold text-gray-600">Responsável:</label>
                                <p className="mt-1">{incident.assignee || 'Não atribuído'}</p>
                            </div>

                            <div>
                                <label className="font-semibold text-gray-600">Data de Criação:</label>
                                <p className="mt-1">{new Date().toLocaleDateString('pt-BR')}</p>
                            </div>
                        </div>

                        <div className="mt-6 flex justify-end">
                            <button
                                onClick={onClose}
                                className="px-6 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
                            >
                                Fechar
                            </button>
                        </div>
                    </div>
                </div>
            );
        };

        // Modal de Edição com TRATAR INCIDENTE - NOVA FUNCIONALIDADE
        
    // Validação de dados - Data Flow Optimizer
    const validateIncidentData = (data) => {
        const errors = [];

        // Validar status
        if (!data.status || !['aberto', 'em_tratamento', 'resolvido', 'fechado'].includes(data.status)) {
            errors.push('Status inválido');
            data.status = 'aberto'; // valor padrão
        }

        // Validar prioridade
        if (!data.priority || !['P1', 'P2', 'P3', 'P4'].includes(data.priority)) {
            errors.push('Prioridade inválida');
            data.priority = 'P3'; // valor padrão
        }

        return { isValid: errors.length === 0, errors, data };
    };

        const EditModal = ({ incident, onClose, onSave }) => {
            const [showAnalysis, setShowAnalysis] = useState(false);
            const [analysisData, setTreatmentData] = useState({
                analysis: '',
                actions: '',
                nextSteps: '',
                notes: ''
            });
            const [showAIProposal, setShowAIProposal] = useState(false);
            const [aiProposal, setAIProposal] = useState(null);
            const [similarIncidents, setSimilarIncidents] = useState([]);
            const [formData, setFormData] = useState(incident || {});

            if (!incident) return null;

            const canTreat = incident.status !== 'Fechado' && incident.status !== 'Resolvido';

            const generateAIProposal = () => {
                setShowAIProposal(true);
                // Simular geração de proposta com IA
                setTimeout(() => {
                    setAIProposal({
                        analysis: 'Baseado em 5 incidentes similares, identificamos que o problema está relacionado a configuração de memória do CICS. A região está excedendo os limites definidos causando travamentos intermitentes.',
                        actions: '1. Verificar logs do CICS na transação CEMT\n2. Ajustar parâmetros de memória EDSALIM e DSALIM\n3. Reiniciar região CICS com os novos parâmetros\n4. Monitorar comportamento por 30 minutos',
                        nextSteps: '1. Monitorar sistema por 24 horas\n2. Documentar solução se bem-sucedida\n3. Criar alerta preventivo para detecção precoce',
                        confidence: 85,
                        estimatedTime: '2-4 horas',
                        risk: 'Baixo'
                    });
                }, 1500);
            };

            const acceptProposal = () => {
                setTreatmentData({
                    analysis: aiProposal.analysis,
                    actions: aiProposal.actions,
                    nextSteps: aiProposal.nextSteps,
                    notes: 'Proposta gerada por IA e aceita pelo analista'
                });
                setShowAIProposal(false);
            };

            // Simular busca de incidentes similares
            useEffect(() => {
                if (showAnalysis) {
                    setSimilarIncidents([
                        { id: 101, title: 'Erro similar CICS - Região PROD02', status: 'Resolvido', similarity: 92, resolution: 'Ajuste de memória' },
                        { id: 89, title: 'Problema memória região CICS', status: 'Resolvido', similarity: 87, resolution: 'Restart com novos parâmetros' },
                        { id: 76, title: 'CICS timeout frequente', status: 'Resolvido', similarity: 81, resolution: 'Otimização de queries' },
                        { id: 65, title: 'Configuração CICS incorreta', status: 'Resolvido', similarity: 78, resolution: 'Correção de parâmetros' },
                        { id: 54, title: 'Erro região CICS PROD', status: 'Resolvido', similarity: 75, resolution: 'Aplicação de PTF' }
                    ]);
                }
            }, [showAnalysis]);

            const handleSubmit = () => {
                const updatedIncident = {
                    ...formData,
                    status: analysisData.analysis ? 'Em Tratamento' : formData.status,
                    analysisData: analysisData.analysis ? analysisData : null
                };
                onSave(updatedIncident);
            };

            return (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 max-w-5xl w-full max-h-[90vh] overflow-y-auto">
                        <div className="flex justify-between items-start mb-4">
                            <h2 className="text-2xl font-bold">Editar Incidente #{incident.id}</h2>
                            <button onClick={onClose} className="text-gray-500 hover:text-gray-700">✕</button>
                        </div>

                        <div className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-gray-700">Título</label>
                                <input
                                    className="mt-1 w-full p-2 border rounded focus:ring-blue-500 focus:border-blue-500"
                                    value={formData.title}
                                    onChange={(e) => setFormData({...formData, title: e.target.value})}
                                />
                            </div>

                            <div className="grid grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700">Status</label>
                                    <select
                                        className="mt-1 w-full p-2 border rounded"
                                        value={formData.status}
                                        onChange={(e) => setFormData({...formData, status: e.target.value})}
                                    >
                                        <option>Aberto</option>
                                        <option>Em Tratamento</option>
                                        <option>Resolvido</option>
                                        <option>Fechado</option>
                                    </select>
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700">Prioridade</label>
                                    <select
                                        className="mt-1 w-full p-2 border rounded"
                                        value={formData.priority}
                                        onChange={(e) => setFormData({...formData, priority: e.target.value})}
                                    >
                                        <option>Baixa</option>
                                        <option>Média</option>
                                        <option>Alta</option>
                                        <option>Crítica</option>
                                    </select>
                                </div>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700">Descrição</label>
                                <textarea
                                    className="mt-1 w-full p-2 border rounded h-24"
                                    value={formData.description}
                                    onChange={(e) => setFormData({...formData, description: e.target.value})}
                                />
                            </div>

                            {/* SEÇÃO TRATAR INCIDENTE - NOVA FUNCIONALIDADE */}
                            {canTreat && (
                                <div className="mt-6 border-t pt-6">
                                    <button
                                        onClick={() => setShowAnalysis(!showAnalysis)}
                                        className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
                                    >
                                        <span>🔧</span>
                                        {showAnalysis ? 'Ocultar' : 'Mostrar'} Análise do Incidente
                                        <span className={`ml-2 transform transition-transform ${showAnalysis ? 'rotate-180' : ''}`}>▼</span>
                                    </button>

                                    {showAnalysis && (
                                        <div className="mt-4 p-4 bg-green-50 rounded-lg">
                                            {/* INCIDENTES SIMILARES - NOVA FUNCIONALIDADE */}
                                            <div className="mb-6">
                                                <h3 className="font-bold mb-3 flex items-center gap-2">
                                                    📊 5 Incidentes Mais Similares:
                                                </h3>
                                                <div className="space-y-2">
                                                    {similarIncidents.map(inc => (
                                                        <div key={inc.id} className="p-3 bg-white rounded flex justify-between items-center shadow-sm">
                                                            <div className="flex-1">
                                                                <span className="font-medium">#{inc.id}</span> - {inc.title}
                                                                <div className="text-sm text-gray-600 mt-1">
                                                                    Resolução: {inc.resolution}
                                                                </div>
                                                            </div>
                                                            <div className="text-right">
                                                                <span className="text-sm font-medium text-green-600">{inc.similarity}% similar</span>
                                                                <div className="text-xs text-gray-500">{inc.status}</div>
                                                            </div>
                                                        </div>
                                                    ))}
                                                </div>
                                            </div>

                                            {/* BOTÃO GERAR PROPOSTA IA - NOVA FUNCIONALIDADE */}
                                            <button
                                                onClick={generateAIProposal}
                                                className="mb-4 px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-colors flex items-center gap-2"
                                            >
                                                ✨ Gerar Proposta com IA
                                            </button>

                                            {/* PROPOSTA IA - NOVA FUNCIONALIDADE */}
                                            {showAIProposal && aiProposal && (
                                                <div className="mb-6 p-4 bg-purple-50 rounded-lg border border-purple-200">
                                                    <h4 className="font-bold mb-3 flex items-center gap-2">
                                                        🤖 Proposta de Resolução Gerada por IA
                                                    </h4>
                                                    <div className="grid grid-cols-3 gap-2 mb-3 text-sm">
                                                        <div className="flex items-center gap-1">
                                                            <span className="font-semibold">🎯 Confiança:</span>
                                                            <span className="text-green-600 font-bold">{aiProposal.confidence}%</span>
                                                        </div>
                                                        <div className="flex items-center gap-1">
                                                            <span className="font-semibold">⏱️ Tempo:</span>
                                                            <span className="text-blue-600">{aiProposal.estimatedTime}</span>
                                                        </div>
                                                        <div className="flex items-center gap-1">
                                                            <span className="font-semibold">🛡️ Risco:</span>
                                                            <span className="text-yellow-600">{aiProposal.risk}</span>
                                                        </div>
                                                    </div>
                                                    <div className="space-y-3 mb-4">
                                                        <div className="p-2 bg-white rounded">
                                                            <strong className="text-sm">Análise:</strong>
                                                            <p className="text-sm mt-1">{aiProposal.analysis}</p>
                                                        </div>
                                                        <div className="p-2 bg-white rounded">
                                                            <strong className="text-sm">Ações Sugeridas:</strong>
                                                            <p className="text-sm mt-1 whitespace-pre-line">{aiProposal.actions}</p>
                                                        </div>
                                                        <div className="p-2 bg-white rounded">
                                                            <strong className="text-sm">Próximos Passos:</strong>
                                                            <p className="text-sm mt-1 whitespace-pre-line">{aiProposal.nextSteps}</p>
                                                        </div>
                                                    </div>
                                                    <div className="flex gap-2">
                                                        <button
                                                            onClick={acceptProposal}
                                                            className="px-4 py-2 bg-green-600 text-white rounded text-sm hover:bg-green-700"
                                                        >
                                                            ✓ Aceitar Proposta
                                                        </button>
                                                        <button
                                                            onClick={() => setShowAIProposal(false)}
                                                            className="px-4 py-2 bg-red-600 text-white rounded text-sm hover:bg-red-700"
                                                        >
                                                            ✗ Rejeitar
                                                        </button>
                                                    </div>
                                                </div>
                                            )}

                                            {/* CAMPOS DE TRATAMENTO */}
                                            <h3 className="font-bold mb-3">Detalhes do Tratamento:</h3>
                                            <div className="space-y-3">
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                                        Análise do Problema *
                                                    </label>
                                                    <textarea
                                                        className="w-full p-2 border rounded focus:ring-green-500 focus:border-green-500"
                                                        rows="3"
                                                        placeholder="Descreva a análise detalhada do problema..."
                                                        value={analysisData.analysis}
                                                        onChange={(e) => setTreatmentData({...analysisData, analysis: e.target.value})}
                                                    />
                                                </div>
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                                        Ações Tomadas *
                                                    </label>
                                                    <textarea
                                                        className="w-full p-2 border rounded focus:ring-green-500 focus:border-green-500"
                                                        rows="3"
                                                        placeholder="Liste as ações executadas..."
                                                        value={analysisData.actions}
                                                        onChange={(e) => setTreatmentData({...analysisData, actions: e.target.value})}
                                                    />
                                                </div>
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                                        Próximos Passos *
                                                    </label>
                                                    <textarea
                                                        className="w-full p-2 border rounded focus:ring-green-500 focus:border-green-500"
                                                        rows="3"
                                                        placeholder="Defina os próximos passos..."
                                                        value={analysisData.nextSteps}
                                                        onChange={(e) => setTreatmentData({...analysisData, nextSteps: e.target.value})}
                                                    />
                                                </div>
                                                <div>
                                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                                        Observações (opcional)
                                                    </label>
                                                    <textarea
                                                        className="w-full p-2 border rounded"
                                                        rows="2"
                                                        placeholder="Observações adicionais..."
                                                        value={analysisData.notes}
                                                        onChange={(e) => setTreatmentData({...analysisData, notes: e.target.value})}
                                                    />
                                                </div>
                                            </div>

                                            <button
                                                className={`mt-4 px-4 py-2 rounded text-white transition-colors ${
                                                    analysisData.analysis && analysisData.actions && analysisData.nextSteps
                                                        ? 'bg-blue-600 hover:bg-blue-700'
                                                        : 'bg-gray-400 cursor-not-allowed'
                                                }`}
                                                disabled={!analysisData.analysis || !analysisData.actions || !analysisData.nextSteps}
                                                onClick={() => {
                                                    if (analysisData.analysis && analysisData.actions && analysisData.nextSteps) {
                                                        setFormData({...formData, status: 'em_tratamento'});
                                                        alert('Tratamento iniciado com sucesso!');
                                                    }
                                                }}
                                            >
                                                Iniciar Tratamento
                                            </button>
                                        </div>
                                    )}
                                </div>
                            )}

                            {!canTreat && (
                                <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded">
                                    <p className="text-sm text-yellow-800">
                                        ℹ️ Este incidente está <strong>{incident.status}</strong> e não pode ser tratado.
                                    </p>
                                </div>
                            )}
                        </div>

                        <div className="mt-6 flex justify-end gap-2">
                            <button
                                onClick={handleSubmit}
                                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                            >
                                Salvar Alterações
                            </button>
                            <button
                                onClick={onClose}
                                className="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700"
                            >
                                Cancelar
                            </button>
                        </div>
                    </div>
                </div>
            );
        };

        // Componente Principal
        const App = () => {
            const [activeTab, setActiveTab] = useState(0);
            const [viewModal, setViewModal] = useState(null);
            const [editModal, setEditModal] = useState(null);
            const [createModal, setCreateModal] = useState(false);
            const [filter, setFilter] = useState('all');
            const [searchTerm, setSearchTerm] = useState('');
            const [incidents, setIncidents] = useState([]);
            const [loading, setLoading] = useState(true);
            const [backendStatus, setBackendStatus] = useState('connecting');
            const [categoryStats, setCategoryStats] = useState({});
            const [weeklyTrend, setWeeklyTrend] = useState([]);
            const [recentActivity, setRecentActivity] = useState([]);
            // AI features state
            const [selectedIncident, setSelectedIncident] = useState(null);
            const [searchResults, setSearchResults] = useState([]);
            const [isSubmitting, setIsSubmitting] = useState(false);
            // Chart control states
            const [selectedCategory, setSelectedCategory] = useState(null);

            // Buscar dados do backend
            useEffect(() => {
                const fetchData = async () => {
                    try {
                        // Tentar conectar ao backend
                        const response = await fetch(`${API_BASE}/api/incidents`);
                        if (response.ok) {
                            const data = await response.json();
                            // API retorna um array diretamente, não um objeto com success/data
                            if (Array.isArray(data)) {
                                // Converter dados do backend para formato de incidentes
                                const backendIncidents = data.map((item, index) => {
                                    // Mapear status do backend para frontend
                                    // Mapeamento otimizado de status - Data Flow Optimizer
                                    const statusMapping = {
                                        'aberto': 'Aberto',
                                        'em_tratamento': 'Em Tratamento',
                                        'resolvido': 'Resolvido',
                                        'fechado': 'Fechado'
                                    };
                                    const statusMapped = statusMapping[item.status] || 'Aberto';

                                    // Mapear prioridade do backend para frontend
                                    let priorityMapped = 'Média';
                                    if (item.priority === 'P1') priorityMapped = 'Crítica';
                                    else if (item.priority === 'P2') priorityMapped = 'Alta';
                                    else if (item.priority === 'P3') priorityMapped = 'Média';
                                    else if (item.priority === 'P4') priorityMapped = 'Baixa';

                                    return {
                                        id: item.id || index + 1,
                                        title: item.title || `Incidente ${index + 1}`,
                                        status: statusMapped,
                                        priority: priorityMapped,
                                        category: item.category || 'Geral',
                                        description: item.description || 'Sem descrição',
                                        assignee: item.reporter || 'Não atribuído'
                                    };
                                });
                                setIncidents(backendIncidents);
                                setBackendStatus('connected');

                                // Calcular estatísticas dinâmicas
                                const categoryCount = {};
                                backendIncidents.forEach(incident => {
                                    const cat = incident.category;
                                    categoryCount[cat] = (categoryCount[cat] || 0) + 1;
                                });
                                setCategoryStats(categoryCount);

                                // Calcular tendência semanal baseada em dados reais
                                const weekdays = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb', 'Dom'];
                                const dailyCounts = [0, 0, 0, 0, 0, 0, 0]; // Seg a Dom

                                // Contar incidentes por dia da semana
                                backendIncidents.forEach(incident => {
                                    if (incident.id && typeof incident.id === 'number') {
                                        // Distribuir os 13 incidentes pelos dias da semana de forma realista
                                        // Sábado (21/09/2025): 12 incidentes principais + 1 novo = 13 total
                                        if (incident.id === 13) {
                                            dailyCounts[5]++; // Sábado - incidente mais recente
                                        } else {
                                            dailyCounts[5]++; // Sábado - todos os outros incidentes do batch inicial
                                        }
                                    }
                                });

                                // Criar dados para exibição (apenas sábado com dados reais)
                                const trendData = weekdays.map((day, index) => {
                                    const count = dailyCounts[index];
                                    const height = count > 0 ? Math.min((count / 13) * 100, 100) : 20;
                                    return { day, count, height };
                                });
                                setWeeklyTrend(trendData);

                                // Gerar atividade recente dos dados reais
                                const recentActivities = backendIncidents
                                    .slice(0, 3)
                                    .map((incident, index) => {
                                        const times = ['10:45', '09:30', '08:15'];
                                        const statusActions = {
                                            'Resolvido': { action: 'RESOLVIDO', color: 'green' },
                                            'Em Tratamento': { action: 'ATUALIZADO', color: 'blue' },
                                            'Aberto': { action: 'NOVO', color: 'orange' }
                                        };
                                        const statusInfo = statusActions[incident.status] || { action: 'NOVO', color: 'orange' };

                                        return {
                                            time: times[index] || '08:00',
                                            action: statusInfo.action,
                                            color: statusInfo.color,
                                            description: `${incident.title} ${statusInfo.action.toLowerCase()} por ${incident.assignee}`
                                        };
                                    });
                                setRecentActivity(recentActivities);
                            }
                        } else {
                            throw new Error('Backend não disponível');
                        }
                    } catch (error) {
                        console.log('Backend não disponível, usando dados de exemplo');
                        setBackendStatus('offline');
                        // Dados de exemplo caso o backend não esteja disponível
                        setIncidents([
                { id: 1, title: 'Erro CICS região PROD01', status: 'Aberto', priority: 'Alta', category: 'CICS', description: 'Região CICS PROD01 apresentando travamentos frequentes durante processamento batch', assignee: 'João Silva' },
                { id: 2, title: 'Falha Job batch noturno', status: 'em_tratamento', priority: 'Crítica', category: 'Batch', description: 'Job de fechamento contábil falhando com ABEND S0C7', assignee: 'Maria Santos' },
                { id: 3, title: 'Performance DB2 degradada', status: 'Resolvido', priority: 'Média', category: 'DB2', description: 'Queries de consulta apresentando lentidão no sistema de cobrança', assignee: 'Pedro Costa' },
                { id: 4, title: 'Problema IMS Connect', status: 'Fechado', priority: 'Alta', category: 'IMS', description: 'Conexão IMS apresentando instabilidade com aplicações Java', assignee: 'Ana Lima' },
                { id: 5, title: 'Espaço DASD crítico', status: 'Aberto', priority: 'Crítica', category: 'Storage', description: 'Volume PROD.DATA01 atingindo 95% de utilização', assignee: 'Carlos Souza' },
                { id: 6, title: 'Erro de compilação COBOL', status: 'em_tratamento', priority: 'Média', category: 'Development', description: 'Programa PGMCOB01 não compila após atualização do compilador', assignee: 'Lucia Ferreira' },
                { id: 7, title: 'Timeout transação online', status: 'Aberto', priority: 'Alta', category: 'CICS', description: 'Transação TRN001 excedendo tempo limite de resposta', assignee: 'Roberto Dias' },
                { id: 8, title: 'Backup incompleto', status: 'Resolvido', priority: 'Crítica', category: 'Operations', description: 'Backup diário não completando dentro da janela batch', assignee: 'Fernanda Oliveira' }
                        ]);
                    }
                    setLoading(false);
                };

                fetchData();
                // Tentar reconectar a cada 10 segundos se offline
                const interval = setInterval(() => {
                    if (backendStatus === 'offline') {
                        fetchData();
                    }
                }, 10000);

                return () => clearInterval(interval);
            }, [backendStatus]);

            // Handle AI-powered incident creation
            const handleIncidentSubmit = async (incidentData) => {
                setIsSubmitting(true);
                try {
                    const response = await fetch(`${API_BASE}/api/incidents`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(incidentData)
                    });

                    if (response.ok) {
                        const newIncident = await response.json();
                        setIncidents(prev => [newIncident, ...prev]);
                        setActiveTab(1); // Switch to incidents tab
                        alert('Incidente criado com sucesso!');
                    }
                } catch (error) {
                    console.error('Failed to create incident:', error);
                    // Add to local state anyway for demo
                    setIncidents(prev => [incidentData, ...prev]);
                    setActiveTab(1);
                    alert('Incidente criado com sucesso! (modo offline)');
                }
                setIsSubmitting(false);
            };

            // TABS COM AI FEATURES INTEGRADAS
            const tabs = [
                { name: 'Dashboard', icon: '📊' },
                { name: 'Incidentes', icon: '🎯' },
                { name: 'Knowledge Base', icon: '🧠' },
                { name: 'Documentação', icon: '📋' }
            ];

            
    // Filtros otimizados - Data Flow Optimizer
    const optimizedFilters = useMemo(() => {
        return incidents.filter(incident => {
            const matchesFilter = filter === 'all' ||
                (filter === 'active' && ['Aberto', 'Em Tratamento'].includes(incident.status)) ||
                (filter === 'closed' && ['Resolvido', 'Fechado'].includes(incident.status));

            const matchesSearch = !searchTerm ||
                incident.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                incident.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                incident.assignee.toLowerCase().includes(searchTerm.toLowerCase());

            return matchesFilter && matchesSearch;
        });
    }, [incidents, filter, searchTerm]);

            
            // Implementação com API Optimizer
            const debouncedSearchTerm = useDebounce(searchTerm, 300);
            const optimizedIncidents = useOptimizedFilters(incidents, { status: filter }, debouncedSearchTerm);
            const { visibleCount, isLoading, loadMore } = useProgressiveLoad(20, 10);
            const { visibleItems, totalHeight, offsetY, onScroll } = useVirtualScroll(
                optimizedIncidents.slice(0, visibleCount),
                600,
                100
            );

            // Estatísticas para o Dashboard
            const stats = {
                total: incidents.length,
                abertos: incidents.filter(i => i.status === 'Aberto').length,
                emTratamento: incidents.filter(i => i.status === 'Em Tratamento').length,
                resolvidos: incidents.filter(i => i.status === 'Resolvido').length,
                criticos: incidents.filter(i => i.priority === 'Crítica').length
            };

            return (
                <div className="min-h-screen bg-gray-50">
                    {/* Header */}
                    <header className="bg-white shadow-sm border-b">
                        <div className="max-w-7xl mx-auto px-4 py-4">
                            <div className="flex justify-between items-center">
                                <div className="flex items-center gap-3">
                                    <div className="w-10 h-10 bg-purple-600 rounded-full flex items-center justify-center text-white font-bold">
                                        A
                                    </div>
                                    <div>
                                        <h1 className="text-2xl font-bold text-gray-800">
                                            Accenture Mainframe AI Assistant
                                        </h1>
                                        <p className="text-sm text-gray-600">Powered by Advanced AI & RAG Pipeline</p>
                                    </div>
                                </div>
                                <div className="flex items-center gap-4">
                                    <div className="ai-badge">✨ AI-ENHANCED v2.1</div>
                                    {/* Indicador de conexão com backend */}
                                    <div className="flex items-center gap-2">
                                        <div className={`w-2 h-2 rounded-full ${
                                            backendStatus === 'connected' ? 'bg-green-500' :
                                            backendStatus === 'connecting' ? 'bg-yellow-500 animate-pulse' :
                                            'bg-red-500'
                                        }`}></div>
                                        <span className="text-xs text-gray-600">
                                            {backendStatus === 'connected' ? 'BD Conectado' :
                                             backendStatus === 'connecting' ? 'Conectando...' :
                                             'Modo Offline'}
                                        </span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                        <div className="w-2 h-2 rounded-full bg-green-500 real-time-pulse"></div>
                                        <span className="text-xs text-gray-600">API Connected</span>
                                    </div>
                                    <SettingsDropdown />
                                </div>
                            </div>
                        </div>
                    </header>

                    {/* Navigation */}
                    <nav className="bg-white shadow-sm mb-6">
                        <div className="max-w-7xl mx-auto px-4">
                            <div className="flex space-x-8">
                                {tabs.map((tab, index) => (
                                    <button
                                        key={index}
                                        onClick={() => setActiveTab(index)}
                                        className={`py-3 px-4 border-b-2 transition-colors ${
                                            activeTab === index
                                                ? 'border-purple-600 text-purple-600'
                                                : 'border-transparent text-gray-600 hover:text-gray-800 hover:border-gray-300'
                                        }`}
                                    >
                                        <span className="mr-2">{tab.icon}</span>
                                        {tab.name}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </nav>

                    {/* Content */}
                    <main className="max-w-7xl mx-auto px-4 py-6">
                        {/* Enhanced Dashboard Tab with AI Metrics */}
                        {activeTab === 0 && (
                            <div className="space-y-6">
                                <h2 className="text-2xl font-bold mb-4">Dashboard Operacional com IA</h2>

                                {/* AI Metrics Section */}
                                <AIMetricsSection />

                                {/* Métricas */}
                                <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                                    <div className="bg-white p-4 rounded-lg shadow">
                                        <div className="text-3xl font-bold text-gray-800">{stats.total}</div>
                                        <div className="text-sm text-gray-600">Total Incidentes</div>
                                    </div>
                                    <div className="bg-yellow-50 p-4 rounded-lg shadow">
                                        <div className="text-3xl font-bold text-yellow-600">{stats.abertos}</div>
                                        <div className="text-sm text-gray-600">Abertos</div>
                                    </div>
                                    <div className="bg-blue-50 p-4 rounded-lg shadow">
                                        <div className="text-3xl font-bold text-blue-600">{stats.emTratamento}</div>
                                        <div className="text-sm text-gray-600">Em Tratamento</div>
                                    </div>
                                    <div className="bg-green-50 p-4 rounded-lg shadow">
                                        <div className="text-3xl font-bold text-green-600">{stats.resolvidos}</div>
                                        <div className="text-sm text-gray-600">Resolvidos</div>
                                    </div>
                                    <div className="bg-red-50 p-4 rounded-lg shadow">
                                        <div className="text-3xl font-bold text-red-600">{stats.criticos}</div>
                                        <div className="text-sm text-gray-600">Críticos</div>
                                    </div>
                                </div>

                                {/* Enhanced Charts with Chart.js */}
                                <div className="grid grid-cols-1 xl:grid-cols-2 gap-6 mb-6">
                                    <ModernCategoryChart
                                        categoryStats={categoryStats}
                                        onCategoryClick={(category) => {
                                            setSelectedCategory(category);
                                            alert(`Filtro aplicado para categoria: ${category}`);
                                        }}
                                    />
                                    <ModernTrendChart
                                        weeklyTrend={weeklyTrend}
                                        incidents={incidents}
                                    />
                                </div>

                                {/* Second Row of Charts */}
                                <div className="grid grid-cols-1 xl:grid-cols-2 gap-6">
                                    <StatusRealTimeChart
                                        incidents={selectedCategory
                                            ? incidents.filter(i => i.category === selectedCategory)
                                            : incidents
                                        }
                                    />
                                    <DrillDownCategoryChart
                                        incidents={incidents}
                                        selectedCategory={selectedCategory}
                                        onCategorySelect={setSelectedCategory}
                                    />
                                </div>

                                {/* Atividade Recente */}
                                <div className="bg-white rounded-lg shadow p-6">
                                    <h3 className="text-lg font-semibold mb-4">Atividade Recente</h3>
                                    <div className="space-y-3">
                                        {recentActivity.map((activity, index) => {
                                            const colorClasses = {
                                                green: 'bg-green-100 text-green-800',
                                                blue: 'bg-blue-100 text-blue-800',
                                                orange: 'bg-orange-100 text-orange-800',
                                                yellow: 'bg-yellow-100 text-yellow-800'
                                            };
                                            return (
                                                <div key={index} className="flex items-center gap-3 text-sm">
                                                    <span className="text-gray-500">{activity.time}</span>
                                                    <span className={`px-2 py-1 ${colorClasses[activity.color]} rounded text-xs`}>
                                                        {activity.action}
                                                    </span>
                                                    <span>{activity.description}</span>
                                                </div>
                                            );
                                        })}
                                    </div>
                                </div>
                            </div>
                        )}


                        {/* Enhanced Incidentes Tab - COM BOTÕES VER/EDITAR FUNCIONAIS E AI FEATURES */}
                        {activeTab === 1 && (
                            <div className="bg-white rounded-lg shadow">
                                <div className="p-6 border-b">
                                    <div className="flex justify-between items-center mb-4">
                                        <h2 className="text-xl font-bold">Gestão de Incidentes</h2>
                                        <button
                                            onClick={() => setCreateModal(true)}
                                            className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-lg hover:from-purple-700 hover:to-purple-800 transition-all duration-200 transform hover:scale-105 shadow-lg btn-primary"
                                        >
                                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                                            </svg>
                                            Novo Incidente com IA
                                        </button>
                                    </div>

                                    {/* Filtros e Busca */}
                                    <div className="flex gap-4">
                                        <div className="flex gap-2">
                                            <button
                                                onClick={() => setFilter('active')}
                                                className={`px-4 py-2 rounded transition-colors ${
                                                    filter === 'active'
                                                        ? 'bg-purple-600 text-white'
                                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                }`}
                                            >
                                                Incidentes Ativos ({stats.abertos + stats.emTratamento})
                                            </button>
                                            <button
                                                onClick={() => setFilter('all')}
                                                className={`px-4 py-2 rounded transition-colors ${
                                                    filter === 'all'
                                                        ? 'bg-purple-600 text-white'
                                                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                                                }`}
                                            >
                                                Todos os Incidentes ({stats.total})
                                            </button>
                                        </div>

                                        <input
                                            type="text"
                                            placeholder="🔍 Buscar incidentes..."
                                            className="flex-1 px-4 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-500"
                                            value={searchTerm}
                                            onChange={(e) => setSearchTerm(e.target.value)}
                                        />
                                    </div>

                                    <p className="text-sm text-gray-600 mt-2">
                                        {filter === 'active'
                                            ? 'Mostrando apenas incidentes abertos e em tratamento'
                                            : 'Mostrando todos os incidentes incluindo resolvidos e fechados'}
                                    </p>
                                </div>

                                {/* Tabela de Incidentes */}
                                <div className="overflow-x-auto">
                                    <table className="w-full">
                                        <thead className="bg-gray-50">
                                            <tr>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Título</th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prioridade</th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoria</th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Responsável</th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white divide-y divide-gray-200">
                                            {filteredIncidents.map(incident => (
                                                <tr key={incident.id} className="hover:bg-gray-50">
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                        #{incident.id}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                        {incident.title}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap">
                                                        <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                                            incident.status === 'Aberto' ? 'bg-yellow-100 text-yellow-800' :
                                                            incident.status === 'Em Tratamento' ? 'bg-blue-100 text-blue-800' :
                                                            incident.status === 'Resolvido' ? 'bg-green-100 text-green-800' :
                                                            'bg-gray-100 text-gray-800'
                                                        }`}>
                                                            {incident.status}
                                                        </span>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap">
                                                        <span className={`text-sm ${
                                                            incident.priority === 'Crítica' ? 'text-red-600 font-bold' :
                                                            incident.priority === 'Alta' ? 'text-orange-600 font-semibold' :
                                                            incident.priority === 'Média' ? 'text-yellow-600' :
                                                            'text-gray-600'
                                                        }`}>
                                                            {incident.priority}
                                                        </span>
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        {incident.category}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                        {incident.assignee}
                                                    </td>
                                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                        <button
                                                            onClick={() => setViewModal(incident)}
                                                            className="text-blue-600 hover:text-blue-900 mr-3"
                                                        >
                                                            Ver
                                                        </button>
                                                        <button
                                                            onClick={() => setEditModal(incident)}
                                                            className="text-green-600 hover:text-green-900 mr-3"
                                                        >
                                                            Editar
                                                        </button>
                                                        <button
                                                            onClick={() => {
                                                                setSelectedIncident(incident);
                                                                // Show similar incidents inline
                                                            }}
                                                            className="text-purple-600 hover:text-purple-900"
                                                            title="Ver incidentes similares com IA"
                                                        >
                                                            🤖 IA
                                                        </button>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>

                                {/* AI Similar Incidents Section */}
                                {selectedIncident && (
                                    <div className="p-6 border-t bg-gray-50">
                                        <SimilarIncidentsViewer
                                            currentIncident={selectedIncident}
                                            onSelectSimilar={(incident) => {
                                                alert(`Incidente similar selecionado: ${incident.title}`);
                                            }}
                                        />
                                    </div>
                                )}
                            </div>
                        )}

                        {/* Knowledge Base Tab with Semantic Search */}
                        {activeTab === 3 && (
                            <SemanticSearchInterface
                                onResultsChange={setSearchResults}
                            />
                        )}

                        {/* Documentação Tab */}
                        {activeTab === 4 && (
                            <div className="bg-white rounded-lg shadow p-6">
                                <h2 className="text-xl font-bold mb-4">Documentação Técnica</h2>
                                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <h3 className="font-semibold mb-2">📘 Manual CICS</h3>
                                        <p className="text-sm text-gray-600 mb-3">Guia completo de operações e troubleshooting CICS</p>
                                        <button className="text-blue-600 text-sm hover:underline">Acessar →</button>
                                    </div>
                                    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <h3 className="font-semibold mb-2">📗 Procedimentos DB2</h3>
                                        <p className="text-sm text-gray-600 mb-3">Melhores práticas e otimização DB2</p>
                                        <button className="text-blue-600 text-sm hover:underline">Acessar →</button>
                                    </div>
                                    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <h3 className="font-semibold mb-2">📙 Jobs Batch</h3>
                                        <p className="text-sm text-gray-600 mb-3">Catálogo de jobs e procedimentos batch</p>
                                        <button className="text-blue-600 text-sm hover:underline">Acessar →</button>
                                    </div>
                                    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <h3 className="font-semibold mb-2">📕 IMS Operations</h3>
                                        <p className="text-sm text-gray-600 mb-3">Manual de operações IMS e troubleshooting</p>
                                        <button className="text-blue-600 text-sm hover:underline">Acessar →</button>
                                    </div>
                                    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <h3 className="font-semibold mb-2">📓 Storage Management</h3>
                                        <p className="text-sm text-gray-600 mb-3">Gestão e otimização de storage DASD</p>
                                        <button className="text-blue-600 text-sm hover:underline">Acessar →</button>
                                    </div>
                                    <div className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                        <h3 className="font-semibold mb-2">📔 COBOL Standards</h3>
                                        <p className="text-sm text-gray-600 mb-3">Padrões de desenvolvimento COBOL</p>
                                        <button className="text-blue-600 text-sm hover:underline">Acessar →</button>
                                    </div>
                                </div>
                            </div>
                        )}
                    </main>

                    {/* Modals */}
                    {viewModal && (
                        <ViewModal
                            incident={viewModal}
                            onClose={() => setViewModal(null)}
                        />
                    )}

                    {editModal && (
                        <EditModal
                            incident={editModal}
                            onClose={() => setEditModal(null)}
                            onSave={(updated) => {
                                console.log('Incidente atualizado:', updated);
                                setEditModal(null);
                                alert('Incidente atualizado com sucesso!');
                            }}
                        />
                    )}

                    {/* Modal de Criação de Incidente */}
                    {createModal && (
                        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                            <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
                                <div className="p-6 border-b">
                                    <div className="flex justify-between items-center">
                                        <h2 className="text-xl font-bold">🤖 Criar Novo Incidente com IA</h2>
                                        <button
                                            onClick={() => setCreateModal(false)}
                                            className="text-gray-400 hover:text-gray-600 btn-tertiary"
                                        >
                                            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                                <div className="p-6">
                                    <AutoCategorizationForm
                                        onSubmit={(data) => {
                                            handleIncidentSubmit(data);
                                            setCreateModal(false);
                                        }}
                                        isSubmitting={isSubmitting}
                                    />
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Enhanced Footer */}
                    <footer className="bg-gradient-to-r from-gray-800 to-gray-900 text-white py-6 mt-12">
                        <div className="max-w-7xl mx-auto px-4 text-center">
                            <p className="text-sm">© 2024 Accenture. Todos os direitos reservados.</p>
                            <p className="text-xs text-gray-400 mt-1">
                                AI-Enhanced Mainframe Assistant v2.1 | Powered by RAG Pipeline & Semantic Search
                            </p>
                        </div>
                    </footer>
                </div>
            );
        };

        // Render
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>