import { z } from 'zod';
import { CategoryNode, CategoryTree } from './CategoryHierarchyService';
export declare const ImportOptionsSchema: any;
export type ImportOptions = z.infer<typeof ImportOptionsSchema>;
export declare const ExportOptionsSchema: any;
export type ExportOptions = z.infer<typeof ExportOptionsSchema>;
export declare const ImportResultSchema: any;
export type ImportResult = z.infer<typeof ImportResultSchema>;
export declare const CategoryTemplateSchema: any;
export type CategoryTemplate = z.infer<typeof CategoryTemplateSchema>;
export declare class CategoryImportExportService {
    private templates;
    private backupHistory;
    constructor();
    exportCategories(categories: CategoryTree[], options?: ExportOptions): Promise<{
        data: string;
        filename: string;
        contentType: string;
    }>;
    private filterCategoriesForExport;
    private exportAsJSON;
    private exportAsCSV;
    private exportAsXML;
    importCategories(fileData: string, format: 'json' | 'csv' | 'xml', options?: ImportOptions): Promise<ImportResult>;
    private parseImportData;
    private parseJSONImport;
    private parseCSVImport;
    private parseXMLImport;
    private validateCategoryStructure;
    private processCategoryImport;
    private processCategory;
    createTemplate(name: string, description: string, categories: CategoryTree[], author?: string): Promise<CategoryTemplate>;
    applyTemplate(templateId: string, options?: ImportOptions): Promise<ImportResult>;
    getTemplates(): CategoryTemplate[];
    deleteTemplate(templateId: string): Promise<void>;
    createBackup(): Promise<string>;
    rollback(backupPath: string): Promise<void>;
    getBackupHistory(): Array<{
        path: string;
        timestamp: Date;
        categoryCount: number;
    }>;
    private loadDefaultTemplates;
    private serializeCategoryTree;
    private flattenCategories;
    private categoryToCSVRow;
    private categoriesToXML;
    private parseCSVLine;
    private escapeXML;
    private compressJSON;
    private countTotalCategories;
    private calculateMaxDepth;
    private isDescendantOf;
    private limitDepth;
    private generateSlug;
    private generateId;
    private getCategoryPathArray;
    private mergeCategories;
    protected abstract findCategoryByPath(path: string[]): Promise<string | null>;
    protected abstract findExistingCategory(name: string, parentId: string | null): Promise<CategoryNode | null>;
    protected abstract createMissingParents(path: string[], options: ImportOptions): Promise<string>;
    protected abstract getCategoryPath(categoryId: string): Promise<string[]>;
    protected abstract getCategoryLevel(categoryId: string): Promise<number>;
    protected abstract createCategory(category: Omit<CategoryNode, 'id' | 'created_at' | 'updated_at'>): Promise<CategoryNode>;
    protected abstract updateCategory(id: string, updates: Partial<CategoryNode>): Promise<void>;
    protected abstract getAllCategories(): Promise<CategoryNode[]>;
    protected abstract restoreCategories(categories: CategoryNode[]): Promise<void>;
    protected abstract saveTemplate(template: CategoryTemplate): Promise<void>;
    protected abstract removeTemplateFromStorage(templateId: string): Promise<void>;
}
export default CategoryImportExportService;
//# sourceMappingURL=CategoryImportExportService.d.ts.map