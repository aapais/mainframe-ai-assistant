import { z } from 'zod';
export declare const CategoryNodeSchema: any;
export type CategoryNode = z.infer<typeof CategoryNodeSchema>;
export declare const CategoryTreeSchema: any;
export type CategoryTree = z.infer<typeof CategoryTreeSchema>;
export declare const CreateCategorySchema: any;
export type CreateCategory = z.infer<typeof CreateCategorySchema>;
export declare const UpdateCategorySchema: any;
export type UpdateCategory = z.infer<typeof UpdateCategorySchema>;
export declare const TagSchema: any;
export type Tag = z.infer<typeof TagSchema>;
export declare const CreateTagSchema: any;
export type CreateTag = z.infer<typeof CreateTagSchema>;
export declare const UpdateTagSchema: any;
export type UpdateTag = z.infer<typeof UpdateTagSchema>;
export declare const TagAssociationSchema: any;
export type TagAssociation = z.infer<typeof TagAssociationSchema>;
export declare const BulkCategoryOperationSchema: any;
export type BulkCategoryOperation = z.infer<typeof BulkCategoryOperationSchema>;
export declare const BulkTagOperationSchema: any;
export type BulkTagOperation = z.infer<typeof BulkTagOperationSchema>;
export declare const BulkOperationResultSchema: any;
export type BulkOperationResult = z.infer<typeof BulkOperationResultSchema>;
export declare const AutocompleteSuggestionSchema: any;
export type AutocompleteSuggestion = z.infer<typeof AutocompleteSuggestionSchema>;
export declare const AutocompleteQuerySchema: any;
export type AutocompleteQuery = z.infer<typeof AutocompleteQuerySchema>;
export declare const SearchFacetSchema: any;
export type SearchFacet = z.infer<typeof SearchFacetSchema>;
export declare const FacetedSearchQuerySchema: any;
export type FacetedSearchQuery = z.infer<typeof FacetedSearchQuerySchema>;
export declare const CategoryAnalyticsSchema: any;
export type CategoryAnalytics = z.infer<typeof CategoryAnalyticsSchema>;
export declare const TagAnalyticsSchema: any;
export type TagAnalytics = z.infer<typeof TagAnalyticsSchema>;
export declare class HierarchicalSchemaValidator {
    static validateCreateCategory(data: unknown): CreateCategory;
    static validateUpdateCategory(data: unknown): UpdateCategory;
    static validateCreateTag(data: unknown): CreateTag;
    static validateUpdateTag(data: unknown): UpdateTag;
    static validateBulkCategoryOperation(data: unknown): BulkCategoryOperation;
    static validateBulkTagOperation(data: unknown): BulkTagOperation;
    static validateAutocompleteQuery(data: unknown): AutocompleteQuery;
    static validateFacetedSearchQuery(data: unknown): FacetedSearchQuery;
    static validateCategoryHierarchy(categories: CategoryNode[]): {
        valid: boolean;
        errors: string[];
    };
}
export declare const HierarchicalSchemas: {
    readonly CategoryNode: any;
    readonly CategoryTree: any;
    readonly CreateCategory: any;
    readonly UpdateCategory: any;
    readonly Tag: any;
    readonly CreateTag: any;
    readonly UpdateTag: any;
    readonly TagAssociation: any;
    readonly BulkCategoryOperation: any;
    readonly BulkTagOperation: any;
    readonly BulkOperationResult: any;
    readonly AutocompleteSuggestion: any;
    readonly AutocompleteQuery: any;
    readonly SearchFacet: any;
    readonly FacetedSearchQuery: any;
    readonly CategoryAnalytics: any;
    readonly TagAnalytics: any;
};
//# sourceMappingURL=HierarchicalCategories.schema.d.ts.map