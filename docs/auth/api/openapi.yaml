openapi: 3.0.3
info:
  title: Mainframe AI Assistant SSO API
  description: |
    Comprehensive Single Sign-On API for the Mainframe AI Assistant platform.

    This API provides secure authentication and authorization services supporting
    multiple identity providers including Google OAuth, Microsoft Entra ID, and SAML 2.0.

    ## Features
    - Multi-provider SSO support
    - JWT-based authentication
    - PKCE security for OAuth flows
    - Comprehensive audit logging
    - Rate limiting and security controls

    ## Security
    All endpoints implement industry-standard security practices including:
    - HTTPS-only communication
    - CSRF protection
    - Rate limiting
    - Input validation
    - Comprehensive logging

  version: 2.0.0
  contact:
    name: API Support
    email: api-support@yourcompany.com
    url: https://docs.yourcompany.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.yourcompany.com/v2
    description: Production server
  - url: https://staging-api.yourcompany.com/v2
    description: Staging server
  - url: http://localhost:3000/api/v2
    description: Development server

paths:
  /auth/providers:
    get:
      summary: List available authentication providers
      description: Returns a list of configured identity providers and their capabilities
      operationId: getProviders
      tags:
        - Authentication
      responses:
        '200':
          description: List of available providers
          content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/Provider'
              example:
                providers:
                  - id: "google"
                    name: "Google"
                    type: "oauth2"
                    enabled: true
                    scopes: ["email", "profile"]
                  - id: "microsoft"
                    name: "Microsoft"
                    type: "oidc"
                    enabled: true
                    scopes: ["openid", "profile", "email"]

  /auth/{provider}/authorize:
    get:
      summary: Initiate authentication flow
      description: Redirects user to identity provider for authentication
      operationId: authorizeProvider
      tags:
        - Authentication
      parameters:
        - name: provider
          in: path
          required: true
          description: Identity provider identifier
          schema:
            type: string
            enum: [google, microsoft, saml]
        - name: redirect_uri
          in: query
          required: true
          description: Callback URL after authentication
          schema:
            type: string
            format: uri
        - name: state
          in: query
          required: true
          description: CSRF protection state parameter
          schema:
            type: string
        - name: code_challenge
          in: query
          required: false
          description: PKCE code challenge
          schema:
            type: string
        - name: code_challenge_method
          in: query
          required: false
          description: PKCE code challenge method
          schema:
            type: string
            enum: [S256, plain]
      responses:
        '302':
          description: Redirect to identity provider
          headers:
            Location:
              description: Identity provider authorization URL
              schema:
                type: string
                format: uri
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/{provider}/callback:
    get:
      summary: Handle authentication callback
      description: Processes the callback from identity provider after user authentication
      operationId: callbackProvider
      tags:
        - Authentication
      parameters:
        - name: provider
          in: path
          required: true
          description: Identity provider identifier
          schema:
            type: string
        - name: code
          in: query
          required: true
          description: Authorization code from provider
          schema:
            type: string
        - name: state
          in: query
          required: true
          description: State parameter for CSRF protection
          schema:
            type: string
        - name: code_verifier
          in: query
          required: false
          description: PKCE code verifier
          schema:
            type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
        '400':
          description: Invalid callback parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/token/refresh:
    post:
      summary: Refresh access token
      description: Exchange refresh token for new access token
      operationId: refreshToken
      tags:
        - Token Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: Valid refresh token
              example:
                refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/token/validate:
    post:
      summary: Validate access token
      description: Verify the validity and claims of an access token
      operationId: validateToken
      tags:
        - Token Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidation'
        '401':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      summary: Logout user
      description: Invalidate user session and tokens
      operationId: logout
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                everywhere:
                  type: boolean
                  description: Logout from all devices
                  default: false
              example:
                everywhere: false
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/user:
    get:
      summary: Get current user information
      description: Retrieve information about the authenticated user
      operationId: getCurrentUser
      tags:
        - User Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/sessions:
    get:
      summary: Get user sessions
      description: List active sessions for the current user
      operationId: getUserSessions
      tags:
        - Session Management
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of active sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  sessions:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'

  /auth/sessions/{sessionId}:
    delete:
      summary: Revoke session
      description: Revoke a specific user session
      operationId: revokeSession
      tags:
        - Session Management
      security:
        - BearerAuth: []
      parameters:
        - name: sessionId
          in: path
          required: true
          description: Session identifier
          schema:
            type: string
      responses:
        '200':
          description: Session revoked successfully
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token for authenticated requests

  schemas:
    Provider:
      type: object
      properties:
        id:
          type: string
          description: Unique provider identifier
          example: "google"
        name:
          type: string
          description: Human-readable provider name
          example: "Google"
        type:
          type: string
          enum: [oauth2, oidc, saml]
          description: Authentication protocol type
        enabled:
          type: boolean
          description: Whether provider is currently enabled
        scopes:
          type: array
          items:
            type: string
          description: Available OAuth scopes
          example: ["email", "profile"]
        metadata:
          type: object
          description: Provider-specific metadata
          additionalProperties: true

    AuthenticationResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
        - user
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: Refresh token for obtaining new access tokens
        token_type:
          type: string
          enum: [Bearer]
          description: Token type
          example: "Bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        user:
          $ref: '#/components/schemas/User'

    TokenResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: New JWT access token
        token_type:
          type: string
          enum: [Bearer]
          description: Token type
        expires_in:
          type: integer
          description: Token expiration time in seconds

    TokenValidation:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the token is valid
        claims:
          type: object
          description: Token claims/payload
          properties:
            sub:
              type: string
              description: Subject (user ID)
            exp:
              type: integer
              description: Expiration timestamp
            iat:
              type: integer
              description: Issued at timestamp
            iss:
              type: string
              description: Issuer
            aud:
              type: string
              description: Audience

    User:
      type: object
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
          description: Unique user identifier
          example: "usr_1234567890"
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        name:
          type: string
          description: Full name
          example: "John Doe"
        given_name:
          type: string
          description: First name
          example: "John"
        family_name:
          type: string
          description: Last name
          example: "Doe"
        picture:
          type: string
          format: uri
          description: Profile picture URL
        locale:
          type: string
          description: User locale
          example: "en-US"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
        last_login:
          type: string
          format: date-time
          description: Last successful login timestamp
        provider:
          type: string
          description: Identity provider used for authentication
          example: "google"

    Session:
      type: object
      properties:
        id:
          type: string
          description: Session identifier
        device_info:
          type: object
          properties:
            user_agent:
              type: string
              description: Browser/device user agent
            ip_address:
              type: string
              description: IP address
            location:
              type: string
              description: Approximate location
        created_at:
          type: string
          format: date-time
          description: Session creation time
        last_accessed:
          type: string
          format: date-time
          description: Last activity timestamp
        expires_at:
          type: string
          format: date-time
          description: Session expiration time

    Error:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error code
          example: "invalid_request"
        message:
          type: string
          description: Human-readable error description
          example: "The request is missing a required parameter"
        details:
          type: object
          description: Additional error details
          additionalProperties: true
        correlation_id:
          type: string
          description: Request correlation ID for debugging
          example: "req_abc123def456"

tags:
  - name: Authentication
    description: Authentication and authorization operations
  - name: Token Management
    description: Token validation and refresh operations
  - name: User Management
    description: User information and profile operations
  - name: Session Management
    description: Session management and security operations