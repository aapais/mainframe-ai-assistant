#!/bin/bash

# Comprehensive Vulnerability Assessment Script
# Usage: ./vulnerability-assessment.sh <environment>

set -euo pipefail

ENVIRONMENT=${1:-staging}
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(dirname "$(dirname "$SCRIPT_DIR")")"

source "$(dirname "$SCRIPT_DIR")/deployment/common.sh"

REPORT_DIR="/tmp/security-reports/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$REPORT_DIR"

log_info "Starting comprehensive vulnerability assessment for $ENVIRONMENT"

# 1. Network Security Scan
log_info "Running network security scan..."
if command -v nmap &> /dev/null; then
    if [[ "$ENVIRONMENT" == "production" ]]; then
        TARGET_HOST="mainframe-ai.com"
    else
        TARGET_HOST="staging.mainframe-ai.com"
    fi

    nmap -sS -sV -O -A --script vuln "$TARGET_HOST" > "$REPORT_DIR/network_scan.txt" 2>&1 &
    NMAP_PID=$!
else
    log_warning "nmap not available, skipping network scan"
fi

# 2. Web Application Security Test
log_info "Running OWASP ZAP security scan..."
if command -v docker &> /dev/null; then
    docker run -v "$REPORT_DIR":/zap/wrk/:rw \
        -t owasp/zap2docker-stable zap-baseline.py \
        -t "https://$TARGET_HOST" \
        -g gen.conf -r baseline_report.html &
    ZAP_PID=$!
else
    log_warning "Docker not available, skipping ZAP scan"
fi

# 3. SSL/TLS Configuration Test
log_info "Testing SSL/TLS configuration..."
if command -v sslscan &> /dev/null; then
    sslscan "$TARGET_HOST" > "$REPORT_DIR/ssl_scan.txt" 2>&1
else
    log_warning "sslscan not available"
fi

# Test with testssl.sh if available
if [[ -f "/opt/testssl.sh/testssl.sh" ]]; then
    /opt/testssl.sh/testssl.sh --htmlfile "$REPORT_DIR/testssl_report.html" "$TARGET_HOST" &
    TESTSSL_PID=$!
fi

# 4. Container Security Scan (if running in Kubernetes)
log_info "Running container security assessment..."
if command -v kubectl &> /dev/null && kubectl cluster-info &> /dev/null; then
    # Scan running containers
    kubectl get pods -n "mainframe-ai-$ENVIRONMENT" -o json | \
        jq -r '.items[].spec.containers[].image' | \
        sort -u > "$REPORT_DIR/container_images.txt"

    # Use Trivy to scan each image
    while IFS= read -r image; do
        if [[ -n "$image" ]]; then
            log_info "Scanning container image: $image"
            trivy image --format json --output "$REPORT_DIR/trivy_$(echo "$image" | tr '/:' '_').json" "$image" 2>/dev/null &
        fi
    done < "$REPORT_DIR/container_images.txt"

    # Kubernetes security assessment
    if command -v kube-bench &> /dev/null; then
        kube-bench run --outputfile "$REPORT_DIR/kube_bench_report.txt" &
        KUBEBENCH_PID=$!
    fi

    if command -v kube-hunter &> /dev/null; then
        kube-hunter --remote "$TARGET_HOST" --report json > "$REPORT_DIR/kube_hunter_report.json" 2>&1 &
        KUBEHUNTER_PID=$!
    fi
fi

# 5. Application Dependencies Scan
log_info "Scanning application dependencies..."
cd "$ROOT_DIR"

# Node.js dependencies
if [[ -f "package.json" ]]; then
    npm audit --json > "$REPORT_DIR/npm_audit.json" 2>&1 || true

    # Snyk scan if token available
    if [[ -n "${SNYK_TOKEN:-}" ]]; then
        snyk test --json > "$REPORT_DIR/snyk_report.json" 2>&1 || true
    fi
fi

# 6. Database Security Assessment
log_info "Assessing database security..."
if [[ -n "${DATABASE_URL:-}" ]]; then
    # Check for common database vulnerabilities
    cat > "$REPORT_DIR/db_security_check.sql" << 'EOF'
-- Check for default/weak passwords
SELECT usename, passwd IS NULL as no_password
FROM pg_shadow
WHERE passwd IS NULL OR passwd = '';

-- Check for excessive privileges
SELECT grantee, privilege_type, is_grantable
FROM information_schema.role_table_grants
WHERE privilege_type = 'DELETE'
   OR privilege_type = 'INSERT'
   OR privilege_type = 'UPDATE';

-- Check for unencrypted connections
SHOW ssl;
EOF

    if psql "${DATABASE_URL}" -f "$REPORT_DIR/db_security_check.sql" > "$REPORT_DIR/db_security_results.txt" 2>&1; then
        log_success "Database security check completed"
    else
        log_warning "Could not complete database security check"
    fi
fi

# 7. Secrets and Configuration Security
log_info "Scanning for exposed secrets and misconfigurations..."

# Scan for secrets in code
if command -v truffleHog &> /dev/null; then
    truffleHog --json --regex "$ROOT_DIR" > "$REPORT_DIR/secrets_scan.json" 2>&1 || true
fi

# Check for misconfigured files
find "$ROOT_DIR" -name "*.env*" -o -name "*.config.js" -o -name "*.yaml" -o -name "*.yml" | \
    while IFS= read -r file; do
        if [[ -f "$file" ]]; then
            echo "=== $file ===" >> "$REPORT_DIR/config_files.txt"
            grep -E "(password|secret|key|token)" "$file" >> "$REPORT_DIR/config_files.txt" 2>/dev/null || true
            echo "" >> "$REPORT_DIR/config_files.txt"
        fi
    done

# 8. Authentication and Session Security
log_info "Testing authentication and session security..."
cat > "$REPORT_DIR/auth_security_test.js" << 'EOF'
const https = require('https');

const tests = [
    {
        name: 'Session fixation test',
        path: '/auth/login',
        headers: { 'Cookie': 'sessionid=fixed_session_id' }
    },
    {
        name: 'CSRF protection test',
        path: '/api/user/update',
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
    },
    {
        name: 'SQL injection test',
        path: '/auth/login',
        method: 'POST',
        body: JSON.stringify({ username: "admin' OR '1'='1", password: "test" })
    }
];

// Run basic security tests
tests.forEach(test => {
    console.log(`Running: ${test.name}`);
    // Implementation would go here
});
EOF

# 9. Wait for background scans to complete
log_info "Waiting for background scans to complete..."

# Wait with timeout
wait_with_timeout() {
    local pid=$1
    local timeout=300
    local count=0

    while kill -0 "$pid" 2>/dev/null; do
        if [[ $count -ge $timeout ]]; then
            kill -9 "$pid" 2>/dev/null
            log_warning "Background scan PID $pid timed out"
            break
        fi
        sleep 1
        ((count++))
    done
}

# Wait for scans to complete
[[ -n "${NMAP_PID:-}" ]] && wait_with_timeout "$NMAP_PID"
[[ -n "${ZAP_PID:-}" ]] && wait_with_timeout "$ZAP_PID"
[[ -n "${TESTSSL_PID:-}" ]] && wait_with_timeout "$TESTSSL_PID"
[[ -n "${KUBEBENCH_PID:-}" ]] && wait_with_timeout "$KUBEBENCH_PID"
[[ -n "${KUBEHUNTER_PID:-}" ]] && wait_with_timeout "$KUBEHUNTER_PID"

# 10. Generate comprehensive report
log_info "Generating comprehensive security report..."
cat > "$REPORT_DIR/security_assessment_summary.md" << EOF
# Security Assessment Report - $ENVIRONMENT
**Generated:** $(date)
**Target:** $TARGET_HOST
**Environment:** $ENVIRONMENT

## Executive Summary

### Critical Findings
$(find "$REPORT_DIR" -name "*.json" -exec jq -r 'select(.severity == "CRITICAL") | .title' {} \; 2>/dev/null | head -10)

### High Risk Findings
$(find "$REPORT_DIR" -name "*.json" -exec jq -r 'select(.severity == "HIGH") | .title' {} \; 2>/dev/null | head -10)

## Scan Results

### Network Security
- Network scan: $(test -f "$REPORT_DIR/network_scan.txt" && echo "✅ Completed" || echo "❌ Failed")

### Web Application Security
- OWASP ZAP scan: $(test -f "$REPORT_DIR/baseline_report.html" && echo "✅ Completed" || echo "❌ Failed")

### SSL/TLS Configuration
- SSL scan: $(test -f "$REPORT_DIR/ssl_scan.txt" && echo "✅ Completed" || echo "❌ Failed")
- TestSSL scan: $(test -f "$REPORT_DIR/testssl_report.html" && echo "✅ Completed" || echo "❌ Failed")

### Container Security
- Container images scanned: $(ls "$REPORT_DIR"/trivy_*.json 2>/dev/null | wc -l)
- Kubernetes security: $(test -f "$REPORT_DIR/kube_bench_report.txt" && echo "✅ Completed" || echo "❌ Failed")

### Dependencies
- NPM audit: $(test -f "$REPORT_DIR/npm_audit.json" && echo "✅ Completed" || echo "❌ Failed")
- Snyk scan: $(test -f "$REPORT_DIR/snyk_report.json" && echo "✅ Completed" || echo "❌ Failed")

### Database Security
- Database assessment: $(test -f "$REPORT_DIR/db_security_results.txt" && echo "✅ Completed" || echo "❌ Failed")

### Secrets and Configuration
- Secrets scan: $(test -f "$REPORT_DIR/secrets_scan.json" && echo "✅ Completed" || echo "❌ Failed")

## Recommendations

1. **Immediate Actions Required:**
   - Review and fix all CRITICAL severity findings
   - Update vulnerable dependencies
   - Rotate any exposed secrets

2. **Short-term Improvements:**
   - Address HIGH severity vulnerabilities
   - Implement missing security headers
   - Strengthen authentication mechanisms

3. **Long-term Security Enhancements:**
   - Regular penetration testing
   - Security awareness training
   - Implement DevSecOps practices

## Detailed Reports
All detailed scan results are available in: $REPORT_DIR
EOF

# Upload reports to secure storage
if command -v aws &> /dev/null && [[ -n "${AWS_ACCESS_KEY_ID:-}" ]]; then
    aws s3 sync "$REPORT_DIR" "s3://mainframe-ai-security-reports/$ENVIRONMENT/$(date +%Y/%m/%d)/" --sse AES256
    log_success "Security reports uploaded to S3"
fi

# Create alerts for critical findings
CRITICAL_COUNT=$(find "$REPORT_DIR" -name "*.json" -exec jq -r 'select(.severity == "CRITICAL")' {} \; 2>/dev/null | wc -l)
if [[ $CRITICAL_COUNT -gt 0 ]]; then
    log_error "Found $CRITICAL_COUNT critical security issues!"

    # Send alert to Slack if webhook available
    if [[ -n "${SLACK_WEBHOOK:-}" ]]; then
        curl -X POST -H 'Content-type: application/json' \
            --data "{\"text\":\"🚨 CRITICAL SECURITY ALERT: Found $CRITICAL_COUNT critical vulnerabilities in $ENVIRONMENT environment. Please review immediately.\"}" \
            "$SLACK_WEBHOOK"
    fi

    exit 1
fi

log_success "Vulnerability assessment completed. Report available at: $REPORT_DIR/security_assessment_summary.md"